@*--------------------------------------------------------------------------
    **
    **  Copyright (c) 2020, Dale Sinder
    **
    **  Name: Index.razor
    **
    **  Description:
    **      Main page in SPA
    **
    **  This program is free software: you can redistribute it and/or modify
    **  it under the terms of the GNU General Public License version 3 as
    **  published by the Free Software Foundation.
    **
    **  This program is distributed in the hope that it will be useful,
    **  but WITHOUT ANY WARRANTY; without even the implied warranty of
    **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    **  GNU General Public License version 3 for more details.
    **
    **  You should have received a copy of the GNU General Public License
    **  version 3 along with this program in file "license-gpl-3.0.txt".
    **  If not, see <http: //www.gnu.org/licenses/gpl-3.0.txt>.
    **
    **--------------------------------------------------------------------------*@

@page "/"
@using Syncfusion.EJ2.Blazor.Navigations
@using Notes2021Blazor.Shared
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Timers
@using System.Text
@using Newtonsoft.Json
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthorizationService AuthorizationService
@inject ILocalStorageService _localStorage
@inject IModalService Modal
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager

    <div>
        <div class="top-row">
            <div class="keep-center">
                <EjsMenu Items="@menuItemsTop" @ref="@topMenu">
                    <MenuEvents ItemSelected="OnSelectTop"></MenuEvents>
                </EjsMenu>
                &nbsp;&nbsp;
            </div>

            <AuthorizeView>
                <Authorized>
                    <button type="button" class="btn btn-info btn-sm" @onclick="Logout">Logout</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-info btn-sm" @onclick="Register">Register</button>&nbsp;&nbsp;
                    <button type="button" class="btn btn-info btn-sm" @onclick="Login">Login</button>
                </NotAuthorized>
            </AuthorizeView>
            &nbsp;&nbsp;<button type="button" class="btn btn-info btn-sm" @onclick="Home">Notes 2021 Home</button>&nbsp;&nbsp;
        </div>

        @if (CurrentLoc == Locations.Home)
        {
            <Home OnMessage="MessageHandler"></Home>
        }
        else if (CurrentLoc == Locations.About)
        {
            <About OnMessage="MessageHandler"></About>
        }
        else if (CurrentLoc == Locations.MainHelp)
        {
            <Help OnMessage="MessageHandler"></Help>
        }
        @*else if (CurrentLoc == Locations.Login)
        {
            <Login OnMessage="MessageHandler" Autologin="@Autologin"></Login>
        }*@
        else if (CurrentLoc == Locations.Logout)
        {
            <Logout OnMessage="MessageHandler"></Logout>
        }
        else if (CurrentLoc == Locations.Register)
        {
            <Register OnMessage="MessageHandler"></Register>
        }
        @*else @if (CurrentLoc == Locations.Schema)
        {
        <Schema OnMessage="MessageHandler"></Schema>
        }*@
        else @if (CurrentLoc == Locations.Preferences)
  {
    <Preferences OnMessage="MessageHandler"></Preferences>
}
else @if (CurrentLoc == Locations.RecentEdit)
  {
    <Tracker OnMessage="MessageHandler"></Tracker>
}
else @if (CurrentLoc == Locations.Subscriptions)
  {
    <Subscribe OnMessage="MessageHandler"></Subscribe>
}
else @if (CurrentLoc == Locations.License)
  {
    <License></License>
}
else @if (CurrentLoc == Locations.AdminFiles)
  {
    <NotesFilesAdmin></NotesFilesAdmin>
}
else @if (CurrentLoc == Locations.Roles)
  {
    <UserList></UserList>
}
else @if (CurrentLoc == Locations.Linked)
  {
    <LinkIndex OnMessage="MessageHandler"></LinkIndex>
}
else @if (CurrentLoc == Locations.CreateLinked)
  {
    <CreateLinked OnMessage="MessageHandler"></CreateLinked>
}
else @if (CurrentLoc == Locations.EditLinked)
  {
    <EditLinked OnMessage="MessageHandler" id="@IntArg.ToString()"></EditLinked>
}
else @if (CurrentLoc == Locations.FileList)
  {
    <NotesFiles OnMessage="MessageHandler"></NotesFiles>
}
else @if (CurrentLoc == Locations.Temp)
  {
      CurrentLoc = PreviousLoc;
      UpdateMenu();
      navManager.NavigateTo(navManager.Uri, true);
  }

  else if (CurrentLoc == Locations.FileUserIndex)
  {
    @if (Model == null)
    {
        <div class="loading-section">
            <h2>@message</h2>
            <div class="loader mt-5">
                <div class="loader-dot dot1"></div>
                <div class="loader-dot dot2"></div>
                <div class="loader-dot dot3"></div>
            </div>
        </div>
    }
    else
    {
        <AuthorizeView Roles="User,Guest">
            <Authorized>
                @if (newnoteFlag)
                {
                    <NoteEditorPanel Model="@Model" BaseNoteId=0 OnClick="ClickHandler" />
                }
                else if (mode == -1)
                {

                }
                else if (printfile)
                {
                    <DisplayPanel Model="Model" currentHeader="currentHeader" Id="Id" SeqBases="seqBases"
                                  trackers="trackers" seqIndx="seqIndex" OnClick="ClickHandler"
                                  isSearch="isSearch" SearchResults="results" PrintFile="true" ToolTips="false" />
                }
                else if (mode == 0)  // index mode
                {
                    if (!string.IsNullOrEmpty(message))
                    {
                        <div class="loading-section">
                            <h2>@message ...</h2>
                            <div class="loader mt-5">
                                <div class="loader-dot dot1"></div>
                                <div class="loader-dot dot2"></div>
                                <div class="loader-dot dot3"></div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div><br /></div>
                        <IndexHeader Model="@Model" BasenoteCount="@basenoteCount" arcId="@archiveID" />
                        if (!Model.UserData.Pref1)
                        {
                            <NoteIndex Model="@Model" FirstOrdinal="@currentHeader.NoteOrdinal" OnClick="ClickHandler" />
                        }
                        else
                        {
                            <div class="topmenu">
                                <ListMenu Model="@Model" OnClick="ClickHandler" />
                            </div>
                            <NoteIndexOld Model="@Model" OnClick="ClickHandler" />
                        }
                        <br /><br />
                        <div class="arrow1">
                            <div>
                                <EditForm Model="@myInput" Context="EditBox">
                                    <div class="form-group">
                                        <InputText id="arrow1" autofocus="@myInput.isAutoFocus" style="width: 7em" @onkeypress="KeyPressed"
                                                   ValueChanged="@( (string val) => TextHasChanged(val) )"
                                                   Value="@myInput.typedValue"
                                                   ValueExpression="@( () => myInput.typedValue )" />
                                    </div>
                                </EditForm>
                                <input type="submit" value="Navigate" class="btn btn-sm" /> b# | b#.r#
                            </div>
                        </div>
                    }
                }
                else // note display mode
                {
                    if (Model.myAccess.ReadAccess)
                    {
                        <DisplayPanel Model="Model" currentHeader="currentHeader" Id="Id" SeqBases="seqBases"
                                      trackers="trackers" seqIndx="seqIndex" OnClick="ClickHandler"
                                      isSearch="isSearch" SearchResults="results" ToolTips="true" />
                    }
                    else
                    {
                        <h3>You may not read notes in this file.</h3>
                    }
                }
            </Authorized>
            <NotAuthorized>
                <p>Access Denied!</p>
            </NotAuthorized>
        </AuthorizeView>
    }


}


else
{
    <div>Routing Error!</div>
}

    </div>

<style>
    .e-menu-wrapper ul {
        background-color: #555;
        color: #FFF;
    }

        .e-menu-wrapper ul .e-menu-item .e-caret {
            color: #FFF;
        }

        .e-menu-wrapper ul .e-menu-item.e-focused {
            color: #CCC;
            outline: 0 solid #f8f9fa;
            outline-offset: 0;
            background-color: none;
        }

            .e-menu-wrapper ul .e-menu-item.e-focused .e-caret {
                color: #CCC;
            }

        .e-menu-wrapper ul .e-menu-item.e-selected {
            color: #CCC;
            outline: 0 solid #f2f4f6;
            outline-offset: 0;
            background-color: none;
        }

    .e-menu-wrapper .e-ul {
        background-color: #555;
        color: #FFF;
    }

    .menu-control {
        text-align: center;
        color: #FFF;
        background-color: #555;
    }

    .layout #container {
        color: #FFF;
        background-color: #555;
    }
</style>

@code {

    [Parameter] public EventCallback<Message> OnMessage { get; set; }

    //private bool collapseNavMenu = true;

    //private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    //private string homeclass { get; set; }

    private Locations CurrentLoc { get; set; }
    private Locations PreviousLoc { get; set; }

    private string Autologin { get; set; }

    private List<object> menuItemsTop { get; set; }

    private int IntArg { get; set; }
    private string StringArg { get; set; }

    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public string fileId { get; set; }

    public string Routing { get; set; }

    private bool newnoteFlag { get; set; }
    public long headerId { get; set; }
    private int Id { get; set; }
    private int archiveID { get; set; }
    private NoteDisplayIndexModel Model { get; set; }
    private long mode { get; set; }
    private int basenoteCount { get; set; }
    private string message = "Loading...";
    private LocalInput myInput { get; set; }
    private NoteHeader currentHeader { get; set; }

    private string scroller { get; set; }

    private Timer timer { get; set; }
    private Timer timer2 { get; set; }
    private Timer timerAccess1Trigger { get; set; }
    private Timer timerAccess2Trigger { get; set; }

    private List<Sequencer> trackers { get; set; }
    private int seqIndex { get; set; }

    private List<NoteHeader> seqBases { get; set; }

    private int mailOrd { get; set; }

    private bool isIndexSearch { get; set; }

    private List<NoteHeader> results { get; set; }

    private bool isSearch { get; set; }

    private bool printfile { get; set; }

    private EjsMenu topMenu { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await MakeMenu();

        var uri = navManager.ToAbsoluteUri(navManager.Uri); navManager.ToAbsoluteUri(navManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("show", out var param))
        {
            long NoteId = long.Parse(param.First());
            await EnterAndShow(NoteId);
            PreviousLoc = Locations.Home;
            CurrentLoc = Locations.FileUserIndex;
            StateHasChanged();
            return;
        }
        else if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("filename", out var filename))
        {
            string myfile = filename.First();

            HomePageModel files = await Http.GetJsonAsync<HomePageModel>("api/HomePageData");

            NoteFile x = files.NoteFiles.Find(p => p.NoteFileName == myfile);
            if (x == null)
                return;

            fileId = x.Id.ToString();
            archiveID = 0;
            await MainEntry();
            PreviousLoc = Locations.Home;
            CurrentLoc = Locations.FileUserIndex;
            return;
        }
        else
            PreviousLoc = CurrentLoc = Locations.Home;
    }


    protected async Task MakeMenu()
    {
        menuItemsTop = new List<object>();
        object item;

        item = new { id = "Recent", text = "Recent Notes" };
        menuItemsTop.Add(item);

        item = new { id = "Manage", text = "Manage" };
        menuItemsTop.Add(item);
        item = new { id = "MRecent", text = "Recent", parentId = "Manage" };
        menuItemsTop.Add(item);
        item = new { id = "Subscriptions", text = "Subscriptions", parentId = "Manage" };
        menuItemsTop.Add(item);
        item = new { id = "Preferences", text = "Preferences", parentId = "Manage" };
        menuItemsTop.Add(item);

        item = new { id = "Help", text = "Help" };
        menuItemsTop.Add(item);
        item = new { id = "MainHelp", text = "Help", parentId = "Help" };
        menuItemsTop.Add(item);
        item = new { id = "About", text = "About", parentId = "Help" };
        menuItemsTop.Add(item);
        item = new { id = "License", text = "License", parentId = "Help" };
        menuItemsTop.Add(item);

        item = new { id = "Admin", text = "Admin" };
        menuItemsTop.Add(item);
        item = new { id = "NoteFiles", text = "NoteFiles", parentId = "Admin" };
        menuItemsTop.Add(item);
        item = new { id = "Roles", text = "User Roles", parentId = "Admin" };
        menuItemsTop.Add(item);
        item = new { id = "Linked", text = "Linked Files", parentId = "Admin" };
        menuItemsTop.Add(item);


        await UpdateMenu();
    }

    private async Task UpdateMenu()
    {
        bool isAdmin = false;
        bool isUser = false;

        try
        {

            UserData udata = await Http.GetJsonAsync<UserData>("api/User");
            string uid = udata.UserId;
            EditUserViewModel Umodel = await Http.GetJsonAsync<EditUserViewModel>("api/UserEdit/" + uid);

            foreach (CheckedUser u in Umodel.RolesList)
            {
                if (u.theRole.NormalizedName == "ADMIN" && u.isMember)
                {
                    isUser = isAdmin = true;
                }
                if (u.theRole.NormalizedName == "USER" && u.isMember)
                {
                    isUser = true;
                }
            }
        }
        catch (Exception e)
        {
            //ShowMessage(e.Message);
        }

        await topMenu.EnableItems(new string[] { "Recent Notes", "Manage", "Admin" }, false);

        if (isUser || isAdmin)
        {
            await topMenu.EnableItems(new string[] { "Recent Notes", "Manage" }, true);
        }
        if (isAdmin)
        {
            await topMenu.EnableItems(new string[] { "Admin" }, true);
        }
    }

    public async Task OnSelectTop(MenuEventArgs e)  // top level menu event handler
    {
        PreviousLoc = CurrentLoc;

        if (e.Item.Id == "Recent")
        {
            Routing = "sequence";
            CurrentLoc = Locations.FileUserIndex;
            await StartListing();
            return;
        }

        switch (e.Item.Id)
        {
            case "MainHelp":
                CurrentLoc = Locations.MainHelp; break;
            case "About":
                CurrentLoc = Locations.About; break;
            case "Preferences":
                CurrentLoc = Locations.Preferences; break;
            case "MRecent":
                CurrentLoc = Locations.RecentEdit; break;
            case "Subscriptions":
                CurrentLoc = Locations.Subscriptions; break;
            case "License":
                CurrentLoc = Locations.License; break;
            case "NoteFiles":
                CurrentLoc = Locations.AdminFiles; break;
            case "Roles":
                CurrentLoc = Locations.Roles; break;
            case "Linked":
                CurrentLoc = Locations.Linked; break;

            default: break;
        }

    }

    public async Task MessageHandler(Message Message)
    {
        await UpdateMenu();

        if (Message.Command == Commands.CloseMe)
        {
            CurrentLoc = PreviousLoc;
            PreviousLoc = Locations.Home;
        }
        else if (Message.Command == Commands.CloseMeAndRefresh)
        {
            await UpdateMenu();

            CurrentLoc = PreviousLoc;
            PreviousLoc = Locations.Home;
            StateHasChanged();
        }
        else if (Message.Command == Commands.Show)
        {
            IntArg = Message.IntArg;
            StringArg = Message.StringArg;

            PreviousLoc = CurrentLoc;
            CurrentLoc = Message.Location;

            if (Message.Location == Locations.FileUserIndex)
            {
                fileId = IntArg.ToString();
                Routing = "main";
                await StartListing();
            }
            //else if (Message.Location == Locations.Login)
            //    Autologin = Message.StringArg;
        }
        else if (Message.Command == Commands.Home)
        {
            PreviousLoc = Locations.Home;
            CurrentLoc = PreviousLoc;
        }
        else if (Message.Command == Commands.Dialog)
        {
            if (Message.Location == Locations.Login)
            {
                Autologin = Message.StringArg;

                var parameters = new ModalParameters();
                parameters.Add("Autologin", Autologin);
                Modal.OnClose += HideDialogLogin;
                Modal.Show<Login>("", parameters);

            }
        }
    }

    private void Login()
    {
        Autologin = "x";

        var parameters = new ModalParameters();
        parameters.Add("Autologin", Autologin);
        Modal.OnClose += HideDialogLogin;
        Modal.Show<Login>("", parameters);

    }

    private void HideDialogLogin(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialogLogin;

        //PreviousLoc = CurrentLoc;
        CurrentLoc = Locations.Temp;

        StateHasChanged();

    }

    private void Register()
    {
        PreviousLoc = CurrentLoc;
        CurrentLoc = Locations.Register;
    }

    private void Logout()
    {
        PreviousLoc = Locations.Home;
        CurrentLoc = Locations.Logout;
    }

    private void Home()
    {
        UpdateMenu().GetAwaiter();
        PreviousLoc = Locations.Home;
        CurrentLoc = Locations.Home;
    }

    /// <summary>
    /// /////////////////////////////////////////////
    /// </summary>

    protected async Task ClickHandler(string newMessage)
    {
        //await UpdateMenu();


        //message = "*" + newMessage + "*";
        if (newMessage.StartsWith("Done:"))
        {
            mode = 0;
            this.StateHasChanged();
            int nord = int.Parse(newMessage.Substring(5, newMessage.Length - 5));

            if (nord > 1)
                nord--;
            scroller = "Base" + nord;
        }
        else if (newMessage.StartsWith("Note:"))
        {
            string notenum = newMessage.Substring(5, newMessage.Length - 5);
            long newmode = long.Parse(notenum);

            currentHeader = Model.AllNotes.Find(p => p.Id == newmode);

            mode = newmode;
            this.StateHasChanged();
        }
        else if (newMessage.StartsWith("Html:"))
        {
            int nord = int.Parse(newMessage.Substring(5, newMessage.Length - 5));
            DoExport1(nord, true, true);
        }
        else if (newMessage.StartsWith("html:"))
        {
            int nord = int.Parse(newMessage.Substring(5, newMessage.Length - 5));
            DoExport1(nord, true, false);
        }
        else if (newMessage.StartsWith("mail:"))
        {
            mailOrd = int.Parse(newMessage.Substring(5, newMessage.Length - 5));
            mail1();
        }
        else if (newMessage.StartsWith("EnterAndShow:"))
        {
            long showme = long.Parse(newMessage.Substring(13, newMessage.Length - 13));
            await EnterAndShow(showme);
        }
        else
        {
            switch (newMessage)
            {
                case "ListHelp": ShowHelp(); break;
                case "NewBaseNote":
                    NewBaseNote();
                    break;
                case "CancelEdit":
                    Done();
                    break;
                case "AccessControls": EditAccess(); break;
                case "ListNoteFiles": ListFiles(); break;
                case "SeqFileDone":
                    var stringContent = new StringContent(JsonConvert.SerializeObject(trackers[seqIndex]), Encoding.UTF8, "application/json");
                    HttpResponseMessage result = await Http.PutAsync("api/Sequencer/", stringContent);



                    //NavigationManager.NavigateTo("notes/sequence", true);
                    break;
                case "HtmlFromIndex": HtmlFromIndex(); break;
                case "htmlFromIndex": htmlFromIndex(); break;
                case "eXport": eXport(); break;
                case "mailFromIndex": mail(); break;
                case "mail":
                    mail1(); break;
                case "Search":
                    isIndexSearch = false;
                    Search();
                    break;
                case "SearchFromIndex":
                    isIndexSearch = true;
                    Search();
                    break;
                case "MarkMine":
                    await MarkMine();
                    break;
                case "OutputMarked":
                    OutputMarkedAsk();
                    break;
                case "PrintFile":
                    PrintFile();
                    break;
                case "JsonExport":
                    DoJson();
                    break;
                case "Done":
                    await MainEntry();
                    StateHasChanged();
                    Done();
                    break;

                default:
                    ShowMessage(newMessage + " Clicked");
                    break;
            }

        }
    }

    protected async Task StartListing()
    {
        scroller = string.Empty;
        seqIndex = -1;
        if (Routing == ("display"))  // display a base note from the main index
        {
            headerId = long.Parse(fileId);
            currentHeader = Model.Notes.Find(p => p.Id == headerId);

            mode = currentHeader.Id;
            this.StateHasChanged();
        }
        if (Routing == "main")     // show the main index
        {
            archiveID = 0;
            await MainEntry();
        }
        if (Routing == ("enterandshow")) // load the index data and then display a note
        {
            await EnterAndShow(0);
        }
        if (Routing == ("sequence"))
        {
            trackers = await Http.GetJsonAsync<List<Sequencer>>("api/sequencer");
            if (trackers == null || trackers.Count < 1)
            {
                message = null;
                //await OnMessage.InvokeAsync(new Message { Command = Commands.Home });

                ShowMessage("Completed!");
                Home();
                return;
            }

            await StartFileSequence();
        }
    }

    protected async Task EnterAndShow(long it)
    {
        // fileId is really noteId so use it to get base note header

        long myNoteId = it;
        if (myNoteId == 0)
            myNoteId = long.Parse(fileId);

        NoteHeader myHeader = await Http.GetJsonAsync<NoteHeader>("api/EnterAndDisplay/" + myNoteId);
        Id = myHeader.NoteFileId;  // we now know the file.  So load it up

        archiveID = await _localStorage.GetItemAsync<int>("ArchiveId");

        myInput = new LocalInput();
        myInput.isAutoFocus = true;

        try
        {
            Model = await Http.GetJsonAsync<NoteDisplayIndexModel>("api/NoteIndex/" + Id + "." + archiveID);
            Model.Notes = Model.AllNotes.Where(p => p.ResponseOrdinal == 0).OrderBy(p => p.NoteOrdinal).ToList();
        }
        catch (Exception ex)
        {
            Model = new NoteDisplayIndexModel { message = ex.Message };
            message = ex.Message;
            return;
        }

        if (Model == null)
        {
            message = "Model is null";
            return;
        }

        if (!string.IsNullOrEmpty(Model.message))
            message = Model.message;

        basenoteCount = Model.Notes.Count;

        currentHeader = myHeader;

        message = null;
        newnoteFlag = false;
        mode = myNoteId;
        StateHasChanged();
    }

    protected async Task MainEntry()
    {
        Id = int.Parse(fileId);
        //archiveID = await _localStorage.GetItemAsync<int>("ArchiveId");

        mode = 0;  // index mode

        myInput = new LocalInput();
        myInput.isAutoFocus = true;

        try
        {
            Model = await Http.GetJsonAsync<NoteDisplayIndexModel>("api/NoteIndex/" + Id + "." + archiveID);
            Model.Notes = Model.AllNotes.Where(p => p.ResponseOrdinal == 0).OrderBy(p => p.NoteOrdinal).ToList();
        }
        catch (Exception ex)
        {
            Model = new NoteDisplayIndexModel { message = ex.Message };
        }

        if (Model == null)
        {
            message = "Model is null";
            return;
        }

        if (Model.UserData == null)
        {
            message = "UserData is null";
            return;
        }

        if (!string.IsNullOrEmpty(Model.message))
            message = Model.message;

        if (Model.Notes.Count > 0)
            currentHeader = Model.Notes[0];
        else
            currentHeader = new NoteHeader { NoteOrdinal = 1 };

        message = null;

        basenoteCount = Model.Notes.Count;

        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer(1000);        // we can not put focus in the nav box here so defer it
            timer.Elapsed += TimerTick;
            timer.Enabled = true;

            timer2 = new Timer(1000);
            timer2.Elapsed += TimerTick2;
            timer2.Enabled = true;

        }
    }

    protected void TimerTick(Object source, ElapsedEventArgs e)
    {
        printfile = false;
        timer.Interval = 5000;
        timer.Stop();
        timer.Enabled = false;
        jsRuntime.InvokeAsync<object>("setfocus", "arrow1");
    }

    protected void TimerTick2(Object source, ElapsedEventArgs e)
    {
        if (!string.IsNullOrEmpty(scroller))
        {
            jsRuntime.InvokeAsync<object>("setlocation", scroller);
            scroller = string.Empty;
        }
    }


    protected void StartTimer()
    {
        timer = new Timer(1000);
        timer.Elapsed += TimerTick;
        timer.Enabled = true;
    }

    protected void StopTimer()
    {
        timer.Enabled = false;
        timer.Stop();
    }

    protected async Task StartFileSequence()
    {
        seqBases = null;
        while ((++seqIndex < trackers.Count) && (seqBases == null || seqBases.Count == 0))
        {
            NoteFile nf = await PreLoadSeqFile();
            if (nf.LastEdited < trackers[seqIndex].LastTime)
                continue;

            await LoadSeqFile();
            seqBases = SearchForTrackedBaseNotes(trackers[seqIndex]);
            if (seqBases != null && seqBases.Count > 0)
                break;
        }
        if ((seqIndex >= trackers.Count) || (seqBases == null || seqBases.Count == 0))
        {
            var parameters = new ModalParameters();
            Modal.OnClose += HideDialog;
            mode = -1;
            Modal.Show<Completed>("", parameters);

            Home();

            return;
        }
        message = null;
        currentHeader = seqBases[0];
        mode = currentHeader.Id;
        StateHasChanged();
    }

    protected async Task<NoteFile> PreLoadSeqFile()
    {
        Sequencer tr = trackers[seqIndex];
        Id = tr.NoteFileId;

        mode = 0;  // index mode

        return await Http.GetJsonAsync<NoteFile>("api/NoteIndexFile/" + Id);
    }

    protected async Task LoadSeqFile()
    {
        Sequencer tr = trackers[seqIndex];
        Id = tr.NoteFileId;

        archiveID = 0;

        mode = 0;  // index mode

        myInput = new LocalInput();
        myInput.isAutoFocus = true;

        try
        {
            Model = await Http.GetJsonAsync<NoteDisplayIndexModel>("api/NoteIndex/" + Id + "." + archiveID);
            Model.Notes = Model.AllNotes.Where(p => p.ResponseOrdinal == 0).OrderBy(p => p.NoteOrdinal).ToList();
        }
        catch (Exception ex)
        {
            Model = new NoteDisplayIndexModel { message = ex.Message };
        }

        if (Model == null)
        {
            message = "Model is null";
            return;
        }

        if (!string.IsNullOrEmpty(Model.message))
            message = Model.message;

        message = null;

        basenoteCount = Model.Notes.Count;
    }

    protected List<NoteHeader> SearchForTrackedBaseNotes(Sequencer tr)
    {
        List<NoteHeader> bnh = Model.Notes.Where(p => p.ThreadLastEdited > tr.LastTime).OrderBy(p => p.NoteOrdinal).ToList();
        return bnh;
    }

    protected void ListFiles()
    {
        PreviousLoc = CurrentLoc;
        CurrentLoc = Locations.FileList;
    }

    protected async Task KeyPressed(KeyboardEventArgs eventArgs)
    {
        switch (eventArgs.Key)
        {
            case "Z": ShowHelp(); break;
            case "N":
                if (Model.myAccess.Write)
                {
                    NewBaseNote();
                }
                break;
            case "A":
                if (Model.myAccess.EditAccess || Model.myAccess.ViewAccess)
                {
                    EditAccess();
                }
                break;
            case "a":
                ShowArchive();
                break;
            case "L":
                ListFiles();
                break;
            case "H":
                HtmlFromIndex();
                break;
            case "h":
                htmlFromIndex();
                break;
            case "X":
                eXport();
                break;
            case "m":
                mail();
                break;
            case "S":
                isIndexSearch = true;
                Search();
                break;
            case "M":
                await MarkMine();
                break;
            case "O":
                if (Model.isMarked)
                    OutputMarkedAsk();
                break;
            case "P":
                PrintFile();
                break;
            case "R":
                await MainEntry();
                break;
            case "U":
                Browse();
                break;
            case "J":
                DoJson();
                break;

            default:
                break;
        }

    }

    void NewBaseNote()
    {
        StopTimer();

        //if (Model.UserData.Pref2)
        {
            newnoteFlag = true;
            this.StateHasChanged();
            return;
        }


        //var parameters = new ModalParameters();
        //parameters.Add("Editing", false);
        //parameters.Add("Model", Model);
        //long bnid = 0;
        //parameters.Add("BaseNoteId", bnid);
        //Modal.OnClose += HideEditDialog;
        //Modal.Show<NoteEditorDlg>("", parameters);
    }

    void HideEditDialog(ModalResult modalResult)
    {
        Modal.OnClose -= HideEditDialog;
        newnoteFlag = false;
        StartTimer();
        if (!modalResult.Cancelled)
        {
            // new base note saved.  Now show it.

            NoteHeader newNote = (NoteHeader)modalResult.Data;
            EnterAndShow(newNote.Id);
        }
        else
        {
            // nothing else to do
        }
    }

    private void TextHasChanged(string typedInput)
    {
        typedInput = typedInput.Trim().Replace("'\n", "").Replace("'\r", "").Trim();

        int fileId = Model.noteFile.Id;
        int noteOrd = 1;
        if (string.IsNullOrEmpty(typedInput) || string.IsNullOrWhiteSpace(typedInput))
            return;

        if (typedInput.Contains("."))
        {
            string[] splits = typedInput.Split(new[] { '.' });
            if (splits.Length != 2)
            {
                return;
            }
            bool ax = !int.TryParse(splits[0], out noteOrd);
            bool bx = !int.TryParse(splits[1], out var respOrd);
            if (ax || bx)
            {
                return;
            }
            currentHeader = Model.AllNotes.Where(p => p.NoteOrdinal == noteOrd && p.ResponseOrdinal == respOrd).SingleOrDefault();
            if (currentHeader == null)
                return;
            if (!Model.myAccess.ReadAccess)
                return;
            mode = currentHeader.Id;
        }
        else
        {
            if (!int.TryParse(typedInput, out noteOrd))
            {
                return;
            }
            if (noteOrd < 1 || noteOrd > Model.Notes.Count)
            {
                return;
            }
            if (!Model.myAccess.ReadAccess)
                return;

            currentHeader = Model.Notes[noteOrd - 1];
            mode = currentHeader.Id;
        }

        this.StateHasChanged();
    }


    private void Done()
    {
        mode = 0;
        newnoteFlag = false;
        this.StateHasChanged();
    }

    private void PrintFile()
    {
        StopTimer();
        currentHeader = Model.Notes[0];
        printfile = true;
        timer = new Timer(3000);
        timer.Elapsed += TimerTick;
        timer.Enabled = true;

        StateHasChanged();
    }

    private void SetFocus()
    {
        message = "SetFocus";
        this.StateHasChanged();
    }

    private void ShowHelp()
    {
        var parameters = new ModalParameters();
        StopTimer();
        Modal.OnClose += HideDialog;
        Modal.Show<HelpDialog>("", parameters);
    }

    void HideDialog(ModalResult modalResult)
    {
        StartTimer();
        Modal.OnClose -= HideDialog;
    }

    void ShowArchive()
    {
        if (Model.noteFile.NumberArchives == 0)
            return;
        var parameters = new ModalParameters();
        parameters.Add("NoteFile", Model.noteFile);
        Modal.OnClose += HideDialogArchive;
        StopTimer();
        Modal.Show<Archives>("", parameters);
    }

    void HideDialogArchive(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialogArchive;
        StartTimer();
        if (modalResult.Cancelled)
            return;

        archiveID = (int)modalResult.Data;

        MainEntry().GetAwaiter();
        StateHasChanged();
    }

    private void ShowMessage(string message)
    {
        var parameters = new ModalParameters();
        parameters.Add("Message", message);
        Modal.OnClose += HideDialog;
        Modal.Show<MessageBox>("", parameters);
    }

    private void EditAccess()
    {
        var parameters = new ModalParameters();
        parameters.Add("FileId", Id);
        Modal.OnClose += HideDialogAccess;
        StopTimer();
        Modal.Show<AccessList>("", parameters);
    }

    private List<UserData> udata;

    protected void HideDialogAccess(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialogAccess;

        if (modalResult.Cancelled)
        {
            StartTimer();
            return;
        }

        udata = (List<UserData>)modalResult.Data;

        timerAccess1Trigger = new Timer(250);
        timerAccess1Trigger.Enabled = true;
        timerAccess1Trigger.Elapsed += TriggerCreateAccess;

    }

    protected void TriggerCreateAccess(Object source, ElapsedEventArgs e)
    {
        timerAccess1Trigger.Stop();
        timerAccess1Trigger.Enabled = false;

        var parameters = new ModalParameters();
        parameters.Add("NoteFile", Model.noteFile);
        parameters.Add("UserList", udata);
        Modal.OnClose += HideDialogNewAccess;
        Modal.Show<AddAccessDlg>("", parameters);
    }

    void HideDialogNewAccess(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialogNewAccess;

        timerAccess2Trigger = new Timer(250);
        timerAccess2Trigger.Enabled = true;
        timerAccess2Trigger.Elapsed += EditAccess0;
    }

    void EditAccess0(Object source, ElapsedEventArgs e)
    {
        timerAccess2Trigger.Stop();
        timerAccess2Trigger.Enabled = false;
        EditAccess();
    }

    private void DoJson()
    {
        var parameters = new ModalParameters();

        ExportViewModel vm = new ExportViewModel();
        vm.ArchiveNumber = archiveID;
        vm.NoteFile = Model.noteFile;

        parameters.Add("ExportViewModel", vm);

        Modal.OnClose += HideDialog;
        Modal.Show<ExportJson>("", parameters);
    }

    private void DoExport(bool isHtml, bool isCollapsible, bool isEmail = false, string emailaddr = null)
    {
        var parameters = new ModalParameters();

        ExportViewModel vm = new ExportViewModel();
        vm.ArchiveNumber = archiveID;
        vm.isCollapsible = isCollapsible;
        vm.isDirectOutput = !isEmail;
        vm.isHtml = isHtml;
        vm.NoteFile = Model.noteFile;
        vm.NoteOrdinal = 0;
        vm.Email = emailaddr;

        parameters.Add("ExportViewModel", vm);
        parameters.Add("FileName", Model.noteFile.NoteFileName + (isHtml ? ".html" : ".txt"));

        Modal.OnClose += HideDialog;
        Modal.Show<ExportUtil1>("", parameters);
    }

    private void DoExport1(int NoteOrd, bool isHtml, bool isCollapsible, bool isEmail = false, string emailaddr = null)
    {
        var parameters = new ModalParameters();

        ExportViewModel vm = new ExportViewModel();
        vm.ArchiveNumber = archiveID;
        vm.isCollapsible = isCollapsible;
        vm.isDirectOutput = !isEmail;
        vm.isHtml = isHtml;
        vm.NoteFile = Model.noteFile;
        vm.NoteOrdinal = NoteOrd;
        vm.Email = emailaddr;

        parameters.Add("ExportViewModel", vm);
        parameters.Add("FileName", Model.noteFile.NoteFileName + (isHtml ? ".html" : ".txt"));

        Modal.OnClose += HideDialog;
        Modal.Show<ExportUtil1>("", parameters);
    }

    private void HtmlFromIndex()
    {
        DoExport(true, true);
    }

    private void htmlFromIndex()
    {
        DoExport(true, false);
    }

    private void eXport()
    {
        DoExport(false, false);
    }

    private void mail()
    {
        StopTimer();
        var parameters = new ModalParameters();
        Modal.OnClose += HideDialogMail;
        Modal.Show<Email>("", parameters);
    }

    void HideDialogMail(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialogMail;
        StartTimer();
        if (!modalResult.Cancelled)
            DoExport(true, true, true, modalResult.Data.ToString());
    }

    private void mail1()
    {
        StopTimer();
        var parameters = new ModalParameters();
        Modal.OnClose += HideDialogMail1;
        Modal.Show<Email>("", parameters);
    }

    void HideDialogMail1(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialogMail1;
        StartTimer();
        if (!modalResult.Cancelled)
            DoExport1(mailOrd, true, true, true, modalResult.Data.ToString());
    }


    void Search()
    {
        StopTimer();
        var parameters = new ModalParameters();
        parameters.Add("TimeZone", Model.tZone);

        //if (isIndexSearch)
        parameters.Add("Text", "Whole File");
        //else
        //    parameters.Add("Text", "Note String");

        Modal.OnClose += HideDialogSearch;
        Modal.Show<SearchDlg>("", parameters);
    }

    void HideDialogSearch(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialogSearch;
        StartTimer();
        if (modalResult.Cancelled)
            return;

        Search target = (Search)modalResult.Data;

        DoSearch(target).GetAwaiter();
    }


    private async Task DoSearch(Search target)
    {
        message = "Searching... Please Wait...";
        StateHasChanged();

        switch (target.Option)
        {
            case SearchOption.Author:
            case SearchOption.Title:
            case SearchOption.TimeIsAfter:
            case SearchOption.TimeIsBefore:
                SearchHeader(target);
                break;

            case SearchOption.Content:
            case SearchOption.DirMess:
                await SearchContents(target);
                break;

            case SearchOption.Tag:
                await SearchTags(target);
                break;
        }

        message = null;
        StateHasChanged();
    }

    protected void SearchHeader(Search target)
    {
        results = new List<NoteHeader>();
        List<NoteHeader> lookin = Model.AllNotes;

        foreach (NoteHeader nh in lookin)
        {
            bool isMatch = false;
            switch (target.Option)
            {
                case SearchOption.Author:
                    isMatch = nh.AuthorName.Contains(target.Text);
                    break;
                case SearchOption.Title:
                    isMatch = nh.NoteSubject.ToLower().Contains(target.Text.ToLower());
                    break;
                case SearchOption.TimeIsAfter:
                    isMatch = DateTime.Compare(nh.LastEdited, target.Time) > 0;
                    break;
                case SearchOption.TimeIsBefore:
                    isMatch = DateTime.Compare(nh.LastEdited, target.Time) < 0;
                    break;
            }
            if (isMatch)
                results.Add(nh);
        }

        if (results.Count == 0)
        {
            ShowMessage("Nothing Found.");
            return;
        }

        results = results.OrderBy(p => p.LastEdited).ToList();

        mode = results[0].Id;
        isSearch = true;
        StateHasChanged();
    }

    protected async Task SearchContents(Search target)
    {
        results = new List<NoteHeader>();
        List<NoteHeader> lookin = Model.AllNotes;

        foreach (NoteHeader nh in lookin)
        {
            DisplayModel dm = await Http.GetJsonAsync<DisplayModel>("api/NoteContent/" + nh.Id);
            NoteContent nc = dm.content;
            List<Tags> tags = dm.tags;

            bool isMatch = false;
            switch (target.Option)
            {
                case SearchOption.Content:
                    isMatch = nc.NoteBody.ToLower().Contains(target.Text.ToLower());
                    break;
                case SearchOption.DirMess:
                    isMatch = nc.DirectorMessage.ToLower().Contains(target.Text.ToLower());
                    break;
            }
            if (isMatch)
                results.Add(nh);
        }

        if (results.Count == 0)
        {
            ShowMessage("Nothing Found.");
            return;
        }

        results = results.OrderBy(p => p.LastEdited).ToList();

        mode = results[0].Id;
        isSearch = true;
        StateHasChanged();
    }

    protected async Task SearchTags(Search target)
    {
        List<Tags> tags = await Http.GetJsonAsync<List<Tags>>("api/Tags/" + Model.noteFile.Id);

        results = new List<NoteHeader>();

        foreach (Tags t in tags)
        {
            foreach (NoteHeader x in results)
            {
                if (x.Id == t.NoteHeaderId)
                    break;
                results.Add(Model.AllNotes.Find(p => p.Id == x.Id));
            }
        }

        if (results.Count == 0)
        {
            ShowMessage("Nothing Found.");
            return;
        }

        results = results.OrderBy(p => p.LastEdited).ToList();

        mode = results[0].Id;
        isSearch = true;
        StateHasChanged();
    }

    private async Task MarkMine()
    {
        List<Mark> list = await Http.GetJsonAsync<List<Mark>>("api/Mark");

        List<Mark> marks = new List<Mark>();
        int ord = 1;
        foreach (NoteHeader nh in Model.AllNotes)
        {
            if (nh.AuthorID == Model.myAccess.UserID)
            {
                Mark myMark = new Mark();
                myMark.UserId = Model.myAccess.UserID;
                myMark.NoteFileId = nh.NoteFileId;
                myMark.ArchiveId = nh.ArchiveId;
                myMark.NoteHeaderId = nh.Id;
                myMark.NoteOrdinal = nh.NoteOrdinal;
                myMark.MarkOrdinal = ord++;
                myMark.ResponseOrdinal = -1;

                // Need to check if string already included in this notefile

                List<Mark> list2 = marks.Where(p => p.NoteFileId == nh.NoteFileId
                    && p.ArchiveId == nh.ArchiveId
                    && p.NoteOrdinal == nh.NoteOrdinal)
                    .ToList();
                if (list2 != null && list2.Count > 0)
                {
                    continue;
                }

                // need to check if already in my marks

                List<Mark> list3 = marks.Where(p => p.NoteFileId == nh.NoteFileId
                    && p.ArchiveId == nh.ArchiveId
                    && p.NoteOrdinal == nh.NoteOrdinal)
                    .ToList();
                if (list3 != null && list3.Count > 0)
                {
                    continue;
                }

                marks.Add(myMark);
            }
        }
        if (marks.Count > 0)
        {
            await Http.PutJsonAsync("api/Mark", marks);
            Model.isMarked = true;
            StateHasChanged();
        }

        ShowMessage("Mark Completed. Marked " + marks.Count + " Strings");

    }

    private void OutputMarkedAsk()
    {
        StopTimer();
        var parameters = new ModalParameters();
        Modal.OnClose += HideDialogOutputAsk;
        Modal.Show<OutputDlg>("", parameters);
    }

    private void HideDialogOutputAsk(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialogOutputAsk;
        StartTimer();
        if (!modalResult.Cancelled)
        {
            MarkedOutputModel mo = (MarkedOutputModel)modalResult.Data;

            OutputMarked(mo.isHtml, mo.isCollapsible, mo.isEmail, mo.Email);
        }
    }

    private async Task OutputMarked(bool isHtml, bool isCollapsible, bool isEmail, string Email)
    {
        List<Mark> marks = await Http.GetJsonAsync<List<Mark>>("api/Mark");

        var parameters = new ModalParameters();

        ExportViewModel vm = new ExportViewModel();
        vm.ArchiveNumber = archiveID;
        vm.isCollapsible = isCollapsible;
        vm.isDirectOutput = !isEmail;
        vm.isHtml = isHtml;
        vm.NoteFile = Model.noteFile;
        vm.NoteOrdinal = 0;
        vm.Email = Email;
        vm.Marks = marks.Where(p => p.NoteFileId == Model.noteFile.Id && p.ArchiveId == archiveID).ToList();

        if (vm.Marks == null || vm.Marks.Count == 0)
            return;

        parameters.Add("ExportViewModel", vm);
        parameters.Add("FileName", Model.noteFile.NoteFileName + (true ? ".html" : ".txt"));

        Modal.OnClose += HideDialogOutput;
        Modal.Show<ExportUtil1>("", parameters);
    }

    void HideDialogOutput(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialogOutput;

        OutputCleanup();
    }

    private async Task OutputCleanup()
    {
        List<Mark> marks = await Http.GetJsonAsync<List<Mark>>("api/Mark");

        List<Mark> FileMarks = marks.Where(p => p.NoteFileId == Model.noteFile.Id && p.ArchiveId == archiveID).ToList();

        await Http.DeleteAsync("api/Mark/" + FileMarks[0].NoteFileId + "." + archiveID);

        Model = await Http.GetJsonAsync<NoteDisplayIndexModel>("api/NoteIndex/" + Id + "." + archiveID);
        Model.Notes = Model.AllNotes.Where(p => p.ResponseOrdinal == 0).OrderBy(p => p.NoteOrdinal).ToList();

        StateHasChanged();
    }

    private void Browse()
    {
        StopTimer();
        var parameters = new ModalParameters();
        Modal.OnClose += HideDialog;
        Modal.Show<ImageDlg>("", parameters);
    }


    protected class LocalInput
    {
        [StringLength(10)]
        public string typedValue { get; set; }
        public bool isAutoFocus { get; set; }
    }

}


