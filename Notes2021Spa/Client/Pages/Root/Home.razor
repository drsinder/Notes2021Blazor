@*--------------------------------------------------------------------------
    **
    **  Copyright (c) 2020, Dale Sinder
    **
    **  Name: Index.razor
    **
    **  Description:
    **      Root of the app
    **
    **  This program is free software: you can redistribute it and/or modify
    **  it under the terms of the GNU General Public License version 3 as
    **  published by the Free Software Foundation.
    **
    **  This program is distributed in the hope that it will be useful,
    **  but WITHOUT ANY WARRANTY; without even the implied warranty of
    **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    **  GNU General Public License version 3 for more details.
    **
    **  You should have received a copy of the GNU General Public License
    **  version 3 along with this program in file "license-gpl-3.0.txt".
    **  If not, see <http: //www.gnu.org/licenses/gpl-3.0.txt>.
    **
    **--------------------------------------------------------------------------*@

@*@layout IndexLayout*@
@using Notes2021Blazor.Shared
@using Blazored.LocalStorage
@using System.Security.Claims
@using System.Timers
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthorizationService AuthorizationService
@inject ILocalStorageService _localStorage
@*@inject NavigationManager NavigationManager*@
@inject IJSRuntime jsRuntime

<div>
    <h2 class="center">Welcome to Notes 2021 Blazor Edition <img src="favicon.ico" width="32" /></h2>

    @if (model == null)
    {
        <p class="center"><em>Loading...</em></p>
    }
    else
    {
        <h5 class="center">
            <span id="homepagetime">
                @myTime
            </span>
        </h5>

        @if (model.Message != null && !string.IsNullOrEmpty(model.Message.Message))
        {
            <h5 class="keep-center">@model.Message.Message</h5>
        }
    }


    @if (fileList == null || nameList == null)
    {
        <div class="keep-center">
            <div class="loading-section">
                <h2>Loading....</h2>
                <div class="loader mt-5">
                    <div class="loader-dot dot1"></div>
                    <div class="loader-dot dot2"></div>
                    <div class="loader-dot dot3"></div>
                </div>
            </div>
        </div>
    }
    else
    {
        <AuthorizeView Roles="Guest">
            <Authorized>
                <h5 class="keep-center">You are a guest and my not write to any files.</h5>
            </Authorized>
        </AuthorizeView>
        <AuthorizeView>
            <Authorized Context="Outer">
                <div class="row">
                    <div class="col-md-4"></div>
                    <div class="col-md-4 roundedindex keep-center">
                        <EditForm Model="@dummyFile">
                            <p>
                                <label>
                                    <strong>Enter a NoteFile Name and press Enter:</strong>
                                    <InputText class="form-control short-input"
                                               ValueChanged="@( (string val) => TextHasChanged(val) )"
                                               Value="@dummyFile.NoteFileName"
                                               ValueExpression="@( () => dummyFile.NoteFileName )" />
                                </label>
                            </p>
                            Or select a file<br />
                            <InputSelect id="select1" class="btn btn-file dropdown-toggle form-control short-input"
                                         ValueChanged="@( (string val) => TextHasChanged(val) )"
                                         Value="@dummyFile.NoteFileName"
                                         ValueExpression="@( () => dummyFile.NoteFileName )">
                                <option value="none" selected="selected">-- Select from list --</option>
                                @foreach (var item in fileList)
                                {
                                    <option value=@item.NoteFileName>@item.NoteFileName</option>
                                }
                            </InputSelect>
                            <br />Or select a title<br />
                            <InputSelect id="select2" class="btn btn-title dropdown-toggle form-control short-input"
                                         ValueChanged="@( (string val) => TextHasChanged(val) )"
                                         Value="@dummyFile.NoteFileName"
                                         ValueExpression="@( () => dummyFile.NoteFileName )">
                                <option value="none" selected="selected">-- Select from list --</option>
                                @foreach (var item in nameList)
                                {
                                    <option value=@item.NoteFileName>@item.NoteFileTitle</option>
                                }
                            </InputSelect>
                        </EditForm>
                        <LinkToAllFiles OnMessage="OnMessage"></LinkToAllFiles>
                        @*<h4><a href="notes/notesfiles" class=" keep-center">See All Files</a></h4>*@
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2">
                    </div>
                    <div class="col-md-4">
                        <h4>Important Files</h4>
                        <ul>
                            @foreach (localFile x in impfileList)
                            {
                                <li>
                                    <FileButton NoteFile="@x" OnMessage="OnMessage"></FileButton>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="col-md-4">
                        <h4>History Files</h4>
                        <ul>
                            @foreach (localFile x in histfileList)
                            {
                            <li>
                                <FileButton NoteFile="@x" OnMessage="OnMessage"></FileButton>
                            </li>
                            }
                        </ul>
                    </div>

                </div>

                @*<div class="keep-center"><button type="button" @onclick="Logout">Logout</button></div>*@
            </Authorized>
            <NotAuthorized>
                <div class="keep-center">
                    <h2>Not Logged In!</h2>
                    <h4>Please register if you have not already.  Then login.  Thanks.</h4>

                    @if (Globals.GuestId != "*none*")
                    {
                        <h5>Or you may <button type="button" class="linkblue" @onclick="Autologin">login as Guest</button> to browse.</h5>
                    }

                    @if (model.Message != null && !string.IsNullOrEmpty(model.Message.Message))
                    {
                        <h5 class="keep-center">@model.Message.Message</h5>
                    }

                </div>
            </NotAuthorized>
        </AuthorizeView>
        <AuthorizeView Roles="Guest">
            <Authorized>
                <h5 class="keep-center">You are a guest and my not write to any files.</h5>
            </Authorized>
        </AuthorizeView>
    }
</div>

@functions {
    [Parameter] public EventCallback<Message> OnMessage { get; set; }
    public List<localFile> fileList { get; set; }
    public List<localFile> nameList { get; set; }
    public localFile dummyFile { get; set; }
    public List<localFile> impfileList { get; set; }
    public List<localFile> histfileList { get; set; }

    private HomePageModel model;
    private Timer myTimer;
    private string myTime;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //await OnMessage.InvokeAsync(new Message { Command = Commands.SetPixClass, StringArg = "bigpix" });

        Globals.RootUri = ""; // NavigationManager.Uri;

        ClaimsPrincipal user = (await authenticationStateTask).User;

        await _localStorage.SetItemAsync("ArchiveId", 0);
        await _localStorage.RemoveItemAsync("IsSearch");
        await _localStorage.RemoveItemAsync("ReturnUri");

        if (user.Identity.IsAuthenticated)
        {
            HomePageModel model1 = await Http.GetJsonAsync<HomePageModel>("api/HomePageData");

            Globals.GuestId = model1.GuestId;
            Globals.GuestEmail = model1.GuestEmail;

            myTime = Globals.LocalTimeBlazor(DateTime.Now.ToUniversalTime()).ToLongTimeString()
                + /*" " + model1.TimeZone.Abbreviation +*/ " - "
                + Globals.LocalTimeBlazor(DateTime.Now.ToUniversalTime()).ToLongDateString();

            myTimer = new Timer(1000);
            myTimer.Elapsed += OnTimedEvent;
            myTimer.AutoReset = true;
            myTimer.Enabled = true;

            model = model1;

            dummyFile = new localFile { Id = 0, NoteFileName = " ", NoteFileTitle = " " };
            fileList = new List<localFile>();
            nameList = new List<localFile>();
            histfileList = new List<localFile>();
            impfileList = new List<localFile>();

            List<NoteFile> fileList1 = model.NoteFiles.OrderBy(p => p.NoteFileName).ToList();
            List<NoteFile> nameList1 = model.NoteFiles.OrderBy(p => p.NoteFileTitle).ToList();


            for (int i = 0; i < fileList1.Count; i++)
            {
                localFile work = new localFile { Id = fileList1[i].Id, NoteFileName = fileList1[i].NoteFileName, NoteFileTitle = fileList1[i].NoteFileTitle };
                localFile work2 = new localFile { Id = nameList1[i].Id, NoteFileName = nameList1[i].NoteFileName, NoteFileTitle = nameList1[i].NoteFileTitle };
                fileList.Add(work);
                nameList.Add(work2);

                string fname = work.NoteFileName;
                if (fname == "Opbnotes" || fname == "Gnotes")
                    histfileList.Add(work);

                if (fname == "announce" || fname == "pbnotes" || fname == "noteshelp")
                    impfileList.Add(work);
            }
        }
        else
        {
            HomePageModel model1 = await Http.GetJsonAsync<HomePageModel>("api/HomePageData");

            Globals.GuestId = model1.GuestId;
            Globals.GuestEmail = model1.GuestEmail;

            model = new HomePageModel();
            fileList = nameList = new List<localFile>();
            myTime = "";
        }

    }

    protected override void OnAfterRender(bool firstRender)
    {
        jsRuntime.InvokeAsync<object>("setselect0", "select1");
        jsRuntime.InvokeAsync<object>("setselect0", "select2");
    }

    protected void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        myTime = Globals.LocalTimeBlazor(DateTime.Now.ToUniversalTime()).ToLongTimeString()
            + /*" " + model.TimeZone.Abbreviation + */" - "
            + Globals.LocalTimeBlazor(DateTime.Now.ToUniversalTime()).ToLongDateString();

        this.StateHasChanged();
    }

    private void TextHasChanged(string value)
    {
        value = value.Trim().Replace("'\n", "").Replace("'\r", "");

        try
        {
            foreach (var item in fileList)
            {
                if (value == item.NoteFileName)
                {
                    OnMessage.InvokeAsync(new Message { Command = Commands.Show, Location = Locations.FileUserIndex, IntArg = item.Id/*, StringArg = item.NoteFileName */});

                    //NavigationManager.NavigateTo("notes/main/" + item.Id);
                    return;
                }
            }
        }
        catch
        { }
    }

    private void Autologin()
    {
        OnMessage.InvokeAsync(new Message { Command = Commands.Show, Location = Locations.Login, StringArg = Globals.GuestEmail });
    }

    private void Login()
    {
        OnMessage.InvokeAsync(new Message { Command = Commands.Show, Location = Locations.Login, StringArg = string.Empty });
    }

    private void Logout()
    {
        OnMessage.InvokeAsync(new Message { Command = Commands.Show, Location = Locations.Logout });
    }
}

@code {

    public class localFile : NoteFile
    {
        //public int Id { get; set; }
        //public string NoteFileName { get; set; }
        //public string NoteFileTitle { get; set; }

    }

}

