@*--------------------------------------------------------------------------
    **
    **  Copyright (c) 2020, Dale Sinder
    **
    **  Name: LinkIndex.razor
    **
    **  Description:
    **      List of linked files
    **
    **  This program is free software: you can redistribute it and/or modify
    **  it under the terms of the GNU General Public License version 3 as
    **  published by the Free Software Foundation.
    **
    **  This program is distributed in the hope that it will be useful,
    **  but WITHOUT ANY WARRANTY; without even the implied warranty of
    **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    **  GNU General Public License version 3 for more details.
    **
    **  You should have received a copy of the GNU General Public License
    **  version 3 along with this program in file "license-gpl-3.0.txt".
    **  If not, see <http: //www.gnu.org/licenses/gpl-3.0.txt>.
    **
    **--------------------------------------------------------------------------*@


@using Notes2021Blazor.Shared
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService Modal

<h3>Linked File Index</h3>
@if (Model == null)
{
    <p class="center"><em>Loading...</em></p>
}
else
{
    <AuthorizeView Roles="Admin">
        <Authorized>
            <button type="button" @onclick="Create">Create</button>
            <div class="row">
                <table class="table">
                    <thead>
                        <tr>
                            <th>
                                Home File Id
                            </th>
                            <th>
                                Home File Name
                            </th>
                            <th>
                                Remote File Name
                            </th>
                            <th>
                                Remote Base Uri
                            </th>
                            <th>
                                Accept From
                            </th>
                            <th>
                                Send To
                            </th>
                            <th>
                                Shared Secret
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.HomeFileId</td>
                                <td>@item.HomeFileName</td>
                                <td>@item.RemoteFileName</td>
                                <td>@item.RemoteBaseUri</td>
                                <td>@item.AcceptFrom</td>
                                <td>@item.SendTo</td>
                                <td>@item.Secret</td>
                                <td>
                                    <button @onclick="@(() => EditLink(item.Id))">Edit</button>
                                    <button @onclick="@(() => DeleteLink(item.Id))">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </Authorized>
        <NotAuthorized>
            You do not have access!
        </NotAuthorized>
    </AuthorizeView>
}

@code {

    [Parameter] public EventCallback<Message> OnMessage { get; set; }


    private List<LinkedFile> Model { get; set; }

    private int deleteId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await Http.GetJsonAsync<List<LinkedFile>>("api/Linked");
    }

    protected void Create()
    {
        OnMessage.InvokeAsync(new Message { Command = Commands.Show, Location = Locations.CreateLinked });

        //NavigationManager.NavigateTo("admin/createlinked");
    }

    protected void DeleteLink(int id)
    {
        deleteId = id;
        Confirm();
    }

    protected void EditLink(int id)
    {
        OnMessage.InvokeAsync(new Message { Command = Commands.Show, Location = Locations.EditLinked, IntArg = id });

        //NavigationManager.NavigateTo("admin/editlinked/" + id);
    }

    private void Confirm()
    {
        var parameters = new ModalParameters();
        Modal.OnClose += HideDialog;
        Modal.Show<ConfirmDelete>("", parameters);
    }

    public void HideDialog(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialog;
        if (modalResult.Cancelled)
            return;

        Http.DeleteAsync("api/Linked/" + deleteId);

        Model = Http.GetJsonAsync<List<LinkedFile>>("api/Linked").GetAwaiter().GetResult();
        StateHasChanged();

        //NavigationManager.NavigateTo("admin/linkedfiles", true);
    }

}