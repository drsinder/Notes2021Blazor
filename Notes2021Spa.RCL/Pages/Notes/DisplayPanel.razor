@*--------------------------------------------------------------------------
    **
    **  Copyright (c) 2020, Dale Sinder
    **
    **  Name: DisplayPanel.razor
    **
    **  Description:
    **      Work horse of the notes app
    **
    **  This program is free software: you can redistribute it and/or modify
    **  it under the terms of the GNU General Public License version 3 as
    **  published by the Free Software Foundation.
    **
    **  This program is distributed in the hope that it will be useful,
    **  but WITHOUT ANY WARRANTY; without even the implied warranty of
    **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    **  GNU General Public License version 3 for more details.
    **
    **  You should have received a copy of the GNU General Public License
    **  version 3 along with this program in file "license-gpl-3.0.txt".
    **  If not, see <http: //www.gnu.org/licenses/gpl-3.0.txt>.
    **
    **--------------------------------------------------------------------------*@
@*--------------------------------------------------------------------------
    **
    ** This component handles display of a single note, a string of notes,
    ** navigation between notes without returning to the index, printing of
    ** single notes, note strings, and whole files.  Also makes coffee! :)
    **
    **--------------------------------------------------------------------------*@


@using Notes2021Blazor.Shared
@using Syncfusion.EJ2.Blazor.LinearGauge
@using Syncfusion.EJ2.Blazor.Navigations

@inherits DisplayPanelComp

@if (string.IsNullOrEmpty(curN))
{
    <p class="center"><em>Loading...</em></p>
}
else
{
    <div>
        @if (editing)
        {
            <NoteEditorPanel Model="@Model" BaseNoteId=@currentHeader.BaseNoteId EditHeader="@currentHeader" NoteContent="@currentContent" OnClick="ClickHandler" />
        }
        else if (newnoteFlag)
        {
            <NoteEditorPanel Model="@Model" BaseNoteId=@currentHeader.BaseNoteId OnClick="ClickHandler" />
        }
        <div class="dialognote modal-body">
            @if (ToolTips)
            {
                <h4 class="text-center">@Model.noteFile.NoteFileTitle</h4>
                <hr id="premenu" />
            }
            <div>
                @if (!PrintFile)
                {
                    @if (ToolTips)
                    {
                        <div style="z-index:50;">
                            <DisplayMenu Model="@Model" OnClick="ClickHandler" ToolTips="@ToolTips" />
                        </div>
                    }
                    <div class="noteheader">
                        <p>
                            <span class="keep-right">Note: @currentHeader.NoteOrdinal @respX&nbsp;&nbsp;&nbsp;&nbsp;</span>
                        </p>

                        <h4>
                            Subject: @currentHeader.NoteSubject <br />
                            Author: @currentHeader.AuthorName &nbsp;&nbsp;&nbsp;
                            @(Globals.LocalTimeBlazor(currentHeader.LastEdited).ToLongDateString()) @Globals.LocalTimeBlazor(currentHeader.LastEdited).ToShortTimeString() @*@Model.tZone.Abbreviation*@
                            @if (!string.IsNullOrEmpty(currentContent.DirectorMessage))
                            {
                                <br /><span>Director Message: @currentContent.DirectorMessage</span>
                            }
                            @if (tags != null && tags.Count > 0)
                            {
                                string tl = "Tags: ";
                                foreach (Tags tag in tags)
                                    tl += tag.Tag + " ";
                                <br /><span>@tl</span>
                            }
                        </h4>
                    </div>
                }
                else
                {
                    <div class="keep-center"><h4>Printing...  Please Wait...</h4></div>
                }
            </div>

            @if (!PrintFile)
            {
                <div>
                    <div class="notebody" @onmousedown="StopTimer">
                        @((MarkupString)currentContent.NoteBody)
                    </div>
                </div>
                @if (FocusTimer)
                {
                    <div class="arrow2">
                        <div>
                            <EditForm Model="@myInput" Context="EditBox">
                                <InputText id="arrow2" @onkeypress="KeyPressed"
                                           ValueChanged="@( (string val) => TextHasChanged(val) )"
                                           Value="@myInput.typedValue"
                                           ValueExpression="@( () => myInput.typedValue )" /> #= <strong>@curN</strong>
                                    </EditForm>
                                    <br /><input type="submit" value="Navigate" class="btn btn-sm" /> b#.r#&nbsp;&nbsp;|&nbsp;&nbsp;(+/-)b#&nbsp;&nbsp;|&nbsp;&nbsp;(+/-).r#
                                </div>
                            </div>
                        }
            }
            else
            {
                <div class="control-section keep-center">
                    <h4>Progress: @sliderValueText</h4>
                    <EjsLinearGauge Orientation="Syncfusion.EJ2.Blazor.LinearGauge.Orientation.Horizontal" Height="50px">
                        <LinearGaugeContainer Width="30"
                                              Offset="0"
                                              BackgroundColor="#CCC">
                        </LinearGaugeContainer>
                        <LinearGaugeAxes>
                            <LinearGaugeAxis Maximum="@baseNotes">
                                <LinearGaugeMajorTicks Color="white" Height="5">
                                </LinearGaugeMajorTicks>
                                <LinearGaugeMinorTicks Color="white" Height="2">
                                </LinearGaugeMinorTicks>
                                <LinearGaugeLine Width="0"></LinearGaugeLine>
                                <LinearGaugeAxisLabelStyle Offset="-55">
                                </LinearGaugeAxisLabelStyle>
                                <LinearGaugePointers>
                                    <LinearGaugePointer Value="@currNote"
                                                        Height="30"
                                                        Type="Point.Bar"
                                                        Color="#3C0">
                                    </LinearGaugePointer>
                                </LinearGaugePointers>
                            </LinearGaugeAxis>
                        </LinearGaugeAxes>
                    </EjsLinearGauge>
                </div>
            }
        </div>
        <div>
            @if (!PrintFile)
            {
                <button @onclick="Done" class="btn btn-info btn-sm">Done Reading</button>
                <button @onclick="Print" class="btn btn-success btn-sm">Print</button>
                @if (currentHeader.ResponseCount > 0)
                {
                    <button @onclick="PrintString" class="btn btn-success btn-sm">Print String</button>
                    <span>Show @currentHeader.ResponseCount Reponses <EjsSwitch @bind-Checked="@SubNotes"></EjsSwitch></span>
                    if (SubNotes)
                    {
                        <span> | Expandable Responses <EjsSwitch @bind-Checked="@Expandable"></EjsSwitch></span>
                        if (Expandable && currentHeader.ResponseCount > 1)
                        {
                            <span> | Allow Multiple Expanded <EjsSwitch @bind-Checked="@Multiple"></EjsSwitch></span>
                        }
                    }
                }
            }
        </div>
    </div>

    if (currentHeader.ResponseCount > 0 && SubNotes && !PrintFile)
    {
        List<NoteHeader> responses = Model.AllNotes.Where(p => p.NoteOrdinal == currentHeader.NoteOrdinal && p.ResponseOrdinal != 0).ToList();

        if (Expandable)
        {
            ExpandMode exp = ExpandMode.Single;
            if (Multiple)
                exp = ExpandMode.Multiple;

            <EjsAccordion DataSource="responses" ModelType="@typeof(NoteHeader)" ExpandMode="exp">
                <AccordionTemplates>
                    <HeaderTemplate>
                        <div>
                            Response @((context as NoteHeader).ResponseOrdinal)  -
                            @((context as NoteHeader).AuthorName) - @((context as NoteHeader).NoteSubject)
                        </div>
                    </HeaderTemplate>
                    <ItemTemplate>
                        @{
                            NoteHeader header = context as NoteHeader;
                            <div>
                                <DisplayPanel Model="@Model" currentHeader="@header" Id="@Id" SeqBases="@SeqBases" trackers="@trackers" seqIndx="@seqIndx" OnClick="@ClickHandler"
                                              isSearch="@isSearch" SearchResults="@SearchResults" FocusTimer="false"></DisplayPanel>
                            </div>
                        }
                    </ItemTemplate>
                </AccordionTemplates>
            </EjsAccordion>
        }
        else
        {
            foreach (NoteHeader response in responses)
            {
                <DisplayPanel Model="@Model" currentHeader="@response" Id="@Id" SeqBases="@SeqBases" trackers="@trackers" seqIndx="@seqIndx" OnClick="@ClickHandler"
                              isSearch="@isSearch" SearchResults="@SearchResults" FocusTimer="false"></DisplayPanel>
            }
        }
    }
}
