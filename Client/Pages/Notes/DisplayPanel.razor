@using Notes2021Blazor.Shared
@using System.Timers
@using Syncfusion.EJ2.Blazor.RichTextEditor
@using System.Text
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IModalService Modal
@inject IJSRuntime jsRuntime

@if (string.IsNullOrEmpty(curN))
{
    <p class="center"><em>Loading...</em></p>
}
else if (newnoteFlag)
{
    <NoteEditorPanel Model="@Model" BaseNoteId=@currentHeader.BaseNoteId OnClick="ClickHandler" />
}
else if (editing)
{
    <NoteEditorPanel Model="@Model" BaseNoteId=@currentHeader.BaseNoteId EditHeader="@currentHeader" NoteContent="@currentContent" OnClick="ClickHandler" />
}
else
{
    <div>
        <div class="dialognote modal-body">

            <h4 class="text-center">@Model.noteFile.NoteFileTitle</h4>
            <hr id="premenu" />
            <div class="@MainClass">
                <DisplayMenu Model="@Model" OnClick="ClickHandler" />
                <div class="noteheader">
                    <p>
                        <span class="keep-right">Note: @currentHeader.NoteOrdinal @respX&nbsp;&nbsp;&nbsp;&nbsp;</span>
                    </p>

                    <h4>
                        Subject: @currentHeader.NoteSubject <br />
                        Author: @currentHeader.AuthorName &nbsp;&nbsp;&nbsp;
                        @(Model.tZone.Local(currentHeader.LastEdited).ToLongDateString()) @(Model.tZone.Local(currentHeader.LastEdited).ToShortTimeString()) @Model.tZone.Abbreviation
                        @if (!string.IsNullOrEmpty(currentContent.DirectorMessage))
                        {
                            <br /><span>Director Message: @currentContent.DirectorMessage</span>
                        }
                        @if (tags != null && tags.Count > 0)
                        {
                            string tl = "Tags: ";
                            foreach (Tags tag in tags)
                                tl += tag.Tag + " ";
                            <br /><span>@tl</span>
                        }
                    </h4>
                </div>
            </div>
            <div class="@MainClass">
                <div class="notebody" @onmousedown="StopTimer">
                    @((MarkupString)currentContent.NoteBody)
                </div>
            </div>
            <div class="@PrinterClass">
                <h2>Click the print icon in the bar below.</h2>
                <div class="control-section">
                    <div class="control-wrapper">
                        <div class="control-section">
                            <EjsRichTextEditor @ref="@RteObj" ShowCharCount="false" EditorMode="EditorMode.HTML" MaxLength="200000">
                                <ChildContent>
                                    <RichTextEditorToolbarSettings Items="@Tools"></RichTextEditorToolbarSettings>
                                </ChildContent>
                            </EjsRichTextEditor>
                        </div>
                    </div>
                </div>
                <button @onclick="ClosePrint" class="btn btn-info btn-sm">Close Printer</button>
            </div>
            <div class="arrow2">
                <div class="@MainClass">
                    <EditForm Model="@myInput" Context="EditBox">
                        <InputText id="arrow2" autofocus="@myInput.isAutoFocus" @onkeypress="KeyPressed"
                                   ValueChanged="@( (string val) => TextHasChanged(val) )"
                                   Value="@myInput.typedValue"
                                   ValueExpression="@( () => myInput.typedValue )" /> #= <strong>@curN</strong>
                            </EditForm>
                            <br /><input type="submit" value="Navigate" class="btn btn-sm" /> b#.r#&nbsp;&nbsp;|&nbsp;&nbsp;(+/-)b#&nbsp;&nbsp;|&nbsp;&nbsp;(+/-).r#
                        </div>
                    </div>
                </div>
                <div class="@MainClass">
                    <button @onclick="Done" class="btn btn-info btn-sm">Done Reading</button> <button @onclick="Print" class="btn btn-success btn-sm">Print</button>
                </div>
            </div>
        }

@functions
{
    [Parameter] public NoteDisplayIndexModel Model { get; set; }
    [Parameter] public NoteHeader currentHeader { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public List<NoteHeader> SeqBases { get; set; }
    [Parameter] public List<Sequencer> trackers { get; set; }
    [Parameter] public int seqIndx { get; set; }
    [Parameter] public EventCallback<string> OnClick { get; set; }
    [Parameter] public bool isSearch { get; set; }
    [Parameter] public List<NoteHeader> SearchResults { get; set; }


    protected bool newnoteFlag { get; set; }
    protected bool editing { get; set; }

    private Timer timer { get; set; }
    private Timer timer2 { get; set; }

    public string respX { get; set; }

    public NoteContent currentContent { get; set; }

    public List<Tags> tags;

    private string curN { get; set; }

    private LocalInput myInput { get; set; }

    private int seqBaseIndx { get; set; }
    private int seqRespOrd { get; set; }
    private string stuff { get; set; }

    private string PrinterClass { get; set; }
    private string MainClass { get; set; }

    public object[] Tools = new object[]{
       "Print"
    };

    EjsRichTextEditor RteObj;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        PrinterClass = "printerhidden";
        MainClass = "printershown";
    }

    protected async override Task OnParametersSetAsync()
    {
        Model.myHeader = currentHeader;
        myInput = new LocalInput();
        myInput.isAutoFocus = true;
        seqBaseIndx = 0;
        seqRespOrd = 0;

        newnoteFlag = false;
        editing = false;

        if (isSearch && SearchResults.Count > 0)
        {
            currentHeader = SearchResults[0];
            Model.myHeader = currentHeader;
        }

        DisplayModel dm = await Http.GetJsonAsync<DisplayModel>("api/NoteContent/" + currentHeader.Id);

        currentContent = dm.content;
        tags = dm.tags;



        respX = "";
        if (currentHeader.ResponseCount > 0)
            respX = " - " + currentHeader.ResponseCount + " Responses ";

        curN = "" + currentHeader.NoteOrdinal;
        if (currentHeader.ResponseOrdinal > 0)
        {
            curN += "." + currentHeader.ResponseOrdinal;
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer(1000);
            timer.Elapsed += TimerTick;
            timer.Enabled = true;

            //timer2 = new Timer(1000);
            //timer2.Elapsed += TimerTick2;
            //timer2.Enabled = true;
        }

        await jsRuntime.InvokeVoidAsync("Prism.highlightAll");
    }

    protected void TimerTick(Object source, ElapsedEventArgs e)
    {
        timer.Interval = 5000;
        jsRuntime.InvokeAsync<object>("setfocus", "arrow2");
    }

    protected void Print()
    {
        StringBuilder sb = new StringBuilder();

        sb.Append("<h4 class=\"text-center\">" + Model.noteFile.NoteFileTitle + "</h4>");
        sb.Append("<div class=\"noteheader\"><p> <span class=\"keep-right\">Note: ");
        sb.Append(currentHeader.NoteOrdinal + " " + respX);
        sb.Append("&nbsp;&nbsp;&nbsp;&nbsp;</span></p><h4>Subject: ");
        sb.Append(@currentHeader.NoteSubject);
        sb.Append("<br />Author: ");
        sb.Append((Model.tZone.Local(currentHeader.LastEdited).ToLongDateString()) + " " + (Model.tZone.Local(currentHeader.LastEdited).ToShortTimeString()) + " " + Model.tZone.Abbreviation);
        if (!string.IsNullOrEmpty(currentContent.DirectorMessage))
        {
            sb.Append("<br /><span>Director Message: ");
            sb.Append(currentContent.DirectorMessage);
            sb.Append("</span>");
        }
        if (tags != null && tags.Count > 0)
        {
            sb.Append(" <br /><span>Tags: ");
            foreach (Tags tag in tags)
            {
                sb.Append(tag.Tag + " ");
            }
            sb.Append("</span>");
        }
        sb.Append("</h4></div><div class=\"notebody\" >");
        sb.Append(currentContent.NoteBody);
        sb.Append("</div>");
        stuff = sb.ToString();

        PrinterClass = "printershown";
        MainClass = "printerhidden";

        timer2 = new Timer(500);
        timer2.Elapsed += TimerTick2;
        timer2.Enabled = true;
    }

    protected void TimerTick2(Object source, ElapsedEventArgs e)
    {
        timer2.Enabled = false;
        this.RteObj.ExecuteCommand(CommandName.InsertHTML, stuff);
    }

    protected void ClosePrint()
    {
        PrinterClass = "printerhidden";
        MainClass = "printershown";
    }

    protected void StartTimer()
    {
        timer = new Timer(1000);
        timer.Elapsed += TimerTick;
        timer.Enabled = true;
    }

    protected void StopTimer()
    {
        timer.Enabled = false;
        timer.Stop();
    }

    public async Task ClickHandler(string newMessage)
    {
        switch (newMessage)
        {
            case "ShowHelp": ShowHelp(); break;
            case "NextBaseNote": await NextBaseNote(); break;
            case "PreviousBaseNote": await PreviousBaseNote(); break;
            case "NextNote": await TextHasChanged(""); break;
            case "PreviousNote": await PreviousNote(); break;
            case "NewResponse":
                newnoteFlag = true;
                this.StateHasChanged();
                break;
            case "Edit":
                editing = true;
                this.StateHasChanged();
                break;
            case "Delete": DeleteNote(); break;
            case "Forward": Forward(); break;
            case "Done": Done(); break;
            case "Html": Html(); break;
            case "html": html(); break;
            case "mail": mail(); break;
            case "Search":
                StopTimer();
                await OnClick.InvokeAsync(newMessage);
                break;
            case "Mark":
                await Markit();
                break;

            default:
                await OnClick.InvokeAsync(newMessage);
                break;
        }
    }

    protected void DeleteNote()
    {
        var parameters = new ModalParameters();
        parameters.Add("NoteId", currentHeader.Id);
        parameters.Add("FileId", Model.noteFile.Id);
        var options = new ModalOptions() { HideCloseButton = false };
        Modal.OnClose += HideDialog;
        Modal.Show<DeleteNote>("", parameters, options);
    }

    protected async Task KeyPressed(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs)
    {
        switch (eventArgs.Key)
        {
            case "Z": ShowHelp(); break;
            case "E":
                if (@Model.myAccess.DeleteEdit || Model.myHeader.AuthorID == Model.myAccess.UserID)
                    editing = true;
                StateHasChanged();
                break;
            case "D":
                if (@Model.myAccess.DeleteEdit || Model.myHeader.AuthorID == Model.myAccess.UserID)
                    DeleteNote();
                break;
            case "Enter":
                if (!eventArgs.ShiftKey)
                    await TextHasChanged("");
                else
                    await NextBaseNote();
                break;
            case "b":
                await PreviousNote();
                break;
            case "B":
                await PreviousBaseNote();
                break;
            case "N":
                newnoteFlag = true;
                this.StateHasChanged();
                break;
            case "L":
            case "I":
                Done();
                break;
            case " ":
                if (eventArgs.ShiftKey)
                {
                    if (!isSearch)
                        return;

                    SearchResults.RemoveAt(0);
                    if (SearchResults.Count == 0)
                    {
                        ShowMessage("Search Complete!");
                        isSearch = false;
                        return;
                    }

                    currentHeader = SearchResults[0];
                    await SetNote();
                }
                else
                {
                    if (seqIndx == -1)
                        break;

                    await ContinueSeq();
                }
                break;
            case "F":
                Forward();
                break;
            case "H":
                Html();
                break;
            case "h":
                html();
                break;
            case "m":
                mail();
                break;
            case "S":
                StopTimer();
                await OnClick.InvokeAsync("Search");
                break;
            case "M":
                await Markit();
                break;

            default:

                //var parameters = new ModalParameters();
                //parameters.Add("Message", eventArgs.Key);
                //var options = new ModalOptions() { HideCloseButton = false };
                //Modal.OnClose += HideDialog;
                //Modal.Show<MessageBox>("", parameters, options);

                break;
        }
    }

    protected async Task ContinueSeq()
    {
        // first check for responses
        NoteHeader x = Model.AllNotes.Where(p => p.NoteOrdinal == currentHeader.NoteOrdinal
                && p.ResponseOrdinal > currentHeader.ResponseOrdinal
                && p.LastEdited > trackers[seqIndx].LastTime)
                .OrderBy(p => p.ResponseOrdinal).FirstOrDefault();

        if (x != null) // found a response
        {
            currentHeader = x;
            await SetNote();
            return;
        }

        // else goto next base

        seqBaseIndx++;
        if (seqBaseIndx >= SeqBases.Count)  // finished with this file
        {
            await OnClick.InvokeAsync("SeqFileDone");
            return;
        }

        currentHeader = SeqBases[seqBaseIndx];
        await SetNote();
    }

    protected async Task SetNote()
    {
        DisplayModel dm = await Http.GetJsonAsync<DisplayModel>("api/NoteContent/" + currentHeader.Id);

        currentContent = dm.content;
        tags = dm.tags;

        respX = "";
        if (currentHeader.ResponseOrdinal > 0)
        {
            NoteHeader bnh = Model.Notes.Find(p => p.Id == currentHeader.BaseNoteId);
            respX = " - Response " + currentHeader.ResponseOrdinal + " of " + bnh.ResponseCount;
        }
        else if (currentHeader.ResponseCount > 0)
            respX = " - " + currentHeader.ResponseCount + " Responses ";


        curN = "" + currentHeader.NoteOrdinal;
        if (currentHeader.ResponseOrdinal > 0)
        {
            curN += "." + currentHeader.ResponseOrdinal;
        }
        Model.myHeader = currentHeader;
        this.StateHasChanged();

        //timer2 = new Timer(1000);
        //timer2.Elapsed += TimerTick2;
        //timer2.Enabled = true;

    }

    protected async Task PreviousBaseNote()
    {
        if (currentHeader.NoteOrdinal == 1)
            return;
        currentHeader = Model.Notes.Find(p => p.NoteOrdinal == currentHeader.NoteOrdinal - 1 && p.ResponseOrdinal == 0);
        if (currentHeader == null)
            return;
        await SetNote();
    }

    protected async Task NextBaseNote()
    {
        NoteHeader newbase = Model.Notes.Find(p => p.NoteOrdinal == currentHeader.NoteOrdinal + 1 && p.ResponseOrdinal == 0);
        if (newbase == null)
            return;
        currentHeader = newbase;
        await SetNote();
    }

    protected async Task PreviousNote()
    {
        if (currentHeader.ResponseOrdinal == 0)
        {
            await PreviousBaseNote();
            return;
        }
        NoteHeader newbase = Model.AllNotes.Find(p => p.NoteOrdinal == currentHeader.NoteOrdinal && p.ResponseOrdinal == currentHeader.ResponseOrdinal - 1);
        if (newbase == null)
            return;

        currentHeader = newbase;
        await SetNote();
    }

    private void Done()
    {
        OnClick.InvokeAsync("Done:" + currentHeader.NoteOrdinal);
    }

    private async Task TextHasChanged(string typedInput)
    {
        int fileId = Id;
        int iOrd = currentHeader.NoteOrdinal;
        int iResp = currentHeader.ResponseOrdinal;
        long iNoteId = currentHeader.Id;
        int noteOrd = 1;
        NoteHeader nc;
        NoteHeader bnh = Model.Notes.Find(p => p.Id == currentHeader.BaseNoteId);
        bool ax = false;
        bool plus = false;
        bool minus = false;

        typedInput = typedInput.Trim().Replace("'\n", "").Replace("'\r", "").Trim();

        if (string.IsNullOrEmpty(typedInput) || string.IsNullOrWhiteSpace(typedInput))
        {
            // next note
            NoteHeader searcher = Model.AllNotes.Find(p => p.NoteOrdinal == currentHeader.NoteOrdinal && p.ResponseOrdinal == currentHeader.ResponseOrdinal + 1);
            if (searcher != null)  // found a response
            {
                nc = searcher;
                bnh = Model.Notes.Find(p => p.NoteOrdinal == currentHeader.NoteOrdinal);

                goto beyond;
            }
            searcher = Model.Notes.Find(p => p.NoteOrdinal == currentHeader.NoteOrdinal + 1);
            if (searcher != null) // found a base
            {
                nc = bnh = searcher;
                goto beyond;
            }
            Done();  // reached the end
        }

        if (typedInput.StartsWith("+"))
            plus = true;
        if (typedInput.StartsWith("-"))
            minus = true;
        typedInput = typedInput.Replace("+", "").Replace("-", "");

        if (typedInput.Contains("."))
        {
            string[] splits = typedInput.Split(new[] { '.' });
            if (splits.Length != 2)
            {
                return;
            }
            if (string.IsNullOrEmpty(splits[0]) || string.IsNullOrWhiteSpace(splits[0]))
                noteOrd = iOrd;
            else
                ax = !int.TryParse(splits[0], out noteOrd);
            bool bx = !int.TryParse(splits[1], out var respOrd);
            if (ax || bx)
            {
                return;
            }

            if (noteOrd == iOrd && (plus || minus))
            {
                if (plus)
                    respOrd += iResp;
                else
                    respOrd = iResp - respOrd;

                if (respOrd < 0)
                    respOrd = 0;
                bnh = Model.Notes.Find(p => p.NoteOrdinal == noteOrd);

                if (respOrd > bnh.ResponseCount) respOrd = bnh.ResponseCount;
            }

            nc = Model.AllNotes.Find(p => p.NoteOrdinal == noteOrd && p.ResponseOrdinal == respOrd);
        }
        else
        {
            if (!int.TryParse(typedInput, out noteOrd))
            {
                return;
            }

            if (!plus && !minus && (noteOrd == 0))
            {
                Done();
            }
            if (plus)
                noteOrd += iOrd;
            else if (minus)
                noteOrd = iOrd - noteOrd;

            if (noteOrd < 1) noteOrd = 1;

            long cnt = Model.AllNotes.LongCount();

            if (noteOrd > cnt) noteOrd = (int)cnt;

            nc = Model.Notes.Find(p => p.NoteOrdinal == noteOrd);
            bnh = nc;
        }

        if (nc == null)
        {
            return;
        }

    beyond:

        currentHeader = nc;

        DisplayModel dm = await Http.GetJsonAsync<DisplayModel>("api/NoteContent/" + currentHeader.Id);

        currentContent = dm.content;
        tags = dm.tags;

        respX = "";
        if (currentHeader.ResponseOrdinal > 0)
        {
            respX = " - Response " + currentHeader.ResponseOrdinal + " of " + bnh.ResponseCount;
        }
        else if (bnh.ResponseCount > 0)
            respX = " - " + bnh.ResponseCount + " Responses ";

        curN = "" + bnh.NoteOrdinal;
        if (currentHeader.ResponseOrdinal > 0)
        {
            curN += "." + currentHeader.ResponseOrdinal;
        }
        Model.myHeader = currentHeader;
        this.StateHasChanged();
    }

    private void ShowMessage(string message)
    {
        var parameters = new ModalParameters();
        parameters.Add("Message", message);
        Modal.OnClose += HideDialog;
        Modal.Show<MessageBox>("", parameters);
    }

    private void ShowHelp()
    {
        var parameters = new ModalParameters();
        Modal.OnClose += HideDialog;
        var options = new ModalOptions() { HideCloseButton = false };
        Modal.Show<HelpDialog2>("", parameters, options);
    }

    void HideDialog(ModalResult modalResult)
    {
        Modal.OnClose -= HideDialog;
        StartTimer();
    }

    private void Forward()
    {
        StopTimer();
        var parameters = new ModalParameters();
        ForwardViewModel fv = new ForwardViewModel();
        fv.NoteID = currentHeader.Id;
        fv.FileID = currentHeader.NoteFileId;
        fv.ArcID = currentHeader.ArchiveId;
        fv.NoteOrdinal = currentHeader.NoteOrdinal;
        fv.NoteSubject = currentHeader.NoteSubject;

        if (currentHeader.ResponseCount > 0 || currentHeader.BaseNoteId > 0)
            fv.hasstring = true;

        parameters.Add("ForwardView", fv);

        Modal.OnClose += HideDialog;
        var options = new ModalOptions() { HideCloseButton = false };
        Modal.Show<Forward>("", parameters, options);
    }

    private void Html()
    {
        OnClick.InvokeAsync("Html:" + currentHeader.NoteOrdinal);
    }

    private void html()
    {
        OnClick.InvokeAsync("html:" + currentHeader.NoteOrdinal);
    }

    private void mail()
    {
        StopTimer();
        OnClick.InvokeAsync("mail:" + currentHeader.NoteOrdinal);
    }

    private async Task Markit()
    {
        List<Mark> list = await Http.GetJsonAsync<List<Mark>>("api/Mark");

        if (list != null && list.Count > 0)
        {
            List<Mark> list2 = list.Where(p => p.NoteFileId == currentHeader.NoteFileId
                && p.ArchiveId == currentHeader.ArchiveId
                && p.NoteOrdinal == currentHeader.NoteOrdinal)
                .ToList();

            if (list2 != null && list2.Count > 0)
            {
                ShowMessage("Already Marked for Output");
                return;
            }
        }

        Mark myMark = new Mark();
        myMark.UserId = "Temp";
        myMark.NoteFileId = currentHeader.NoteFileId;
        myMark.ArchiveId = currentHeader.ArchiveId;
        myMark.NoteHeaderId = currentHeader.Id;
        myMark.NoteOrdinal = currentHeader.NoteOrdinal;
        myMark.MarkOrdinal = 1;
        myMark.ResponseOrdinal = -1;

        await Http.PostJsonAsync("api/Mark", myMark);

        Model.isMarked = true;

        ShowMessage("Marked for Output");
    }

    protected class LocalInput
    {
        public string typedValue { get; set; }
        public bool isAutoFocus { get; set; }
    }

}
