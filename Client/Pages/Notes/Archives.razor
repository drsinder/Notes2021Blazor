@*--------------------------------------------------------------------------
    **
    **  Copyright (c) 2020, Dale Sinder
    **
    **  Name: Archives.razor
    **
    **  Description:
    **      Selection of which archive to view.
    **
    **  This program is free software: you can redistribute it and/or modify
    **  it under the terms of the GNU General Public License version 3 as
    **  published by the Free Software Foundation.
    **
    **  This program is distributed in the hope that it will be useful,
    **  but WITHOUT ANY WARRANTY; without even the implied warranty of
    **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    **  GNU General Public License version 3 for more details.
    **
    **  You should have received a copy of the GNU General Public License
    **  version 3 along with this program in file "license-gpl-3.0.txt".
    **  If not, see <http: //www.gnu.org/licenses/gpl-3.0.txt>.
    **
    **--------------------------------------------------------------------------*@

@using Notes2021Blazor.Shared
@using Blazored.LocalStorage
@inject IModalService ModalService
@inject ILocalStorageService _localStorage

    <div class="dialogs modal-body">
        <h3>Archives for:</h3>
        <h3>@noteFile.NoteFileName - @noteFile.NoteFileTitle</h3>
        <p>0 is the active file.  <br />1 is the oldest archive. <br />@noteFile.NumberArchives is the most recent archive</p>
        <p>Type the number of the one you want to view:</p>
        <EjsNumericTextBox TValue="int" Min="@zero" Max="@numArchives" Step=1 Format="##" @bind-Value="@myId"></EjsNumericTextBox>
        <button type="button" @onclick="Submit" class="btn btn-success btn-sm">Submit</button>
        <button type="button" @onclick="Cancel" class="btn btn-info btn-sm">Cancel</button>
    </div>

@code{

    [CascadingParameter] ModalParameters Parameters { get; set; }


    public NoteFile noteFile { get; set; }
    public int myId { get; set; }
    public LocalInput locals { get; set; }

    public int zero { get; set; } = 0;
    public int numArchives { get; set; }

    protected override void OnParametersSet()
    {
        locals = new LocalInput();
        noteFile = Parameters.Get<NoteFile>("NoteFile");
        myId = 0;
        numArchives = noteFile.NumberArchives;

    }

    protected void Submit()
    {
        if (myId < 0)
            myId = 0;
        _localStorage.SetItemAsync("ArchiveId", myId);
        ModalService.Close(ModalResult.Ok<string>("Ok"));
    }

    private void Cancel()
    {
        ModalService.Close(ModalResult.Cancel());
    }

    public class LocalInput
    {
        public string myInput { get; set; }
    }

}
