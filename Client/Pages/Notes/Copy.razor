@*--------------------------------------------------------------------------
    **
    **  Copyright (c) 2020, Dale Sinder
    **
    **  Name: Copy.razor
    **
    **  Description:
    **      Copy Note (string) to another file
    **
    **  This program is free software: you can redistribute it and/or modify
    **  it under the terms of the GNU General Public License version 3 as
    **  published by the Free Software Foundation.
    **
    **  This program is distributed in the hope that it will be useful,
    **  but WITHOUT ANY WARRANTY; without even the implied warranty of
    **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    **  GNU General Public License version 3 for more details.
    **
    **  You should have received a copy of the GNU General Public License
    **  version 3 along with this program in file "license-gpl-3.0.txt".
    **  If not, see <http: //www.gnu.org/licenses/gpl-3.0.txt>.
    **
    **--------------------------------------------------------------------------*@


@using System
@using System.Collections.Generic
@using System.Threading.Tasks
@using Notes2021Blazor.Shared
@using Syncfusion.EJ2.Blazor.DropDowns
@using System.IO
@using System.Text

@inject HttpClient Http
@inject IModalService Modal
@inject IJSRuntime jsRuntime

@if (Files == null)
{ }
else
{  <div class="dialogs keep-center">
        <h4>Copy Note (string)</h4>
        <p>Note Subject:</p>
        <p>@Note.NoteSubject</p>

        <p>Select file name to copy to:</p>
        <EjsDropDownList TItem="NoteFile" TValue="int" @bind-Value="SelectedId" Placeholder="Select a file" DataSource="Files" >
            <DropDownListFieldSettings Text="NoteFileName" Value="Id"></DropDownListFieldSettings>
        </EjsDropDownList>

        <br /><EjsSwitch @bind-Checked="WholeString"></EjsSwitch> Copy Whole String<br/><br />

        <button type="button" @onclick="OnSubmit" class="btn btn-success btn-sm">Copy</button> <button type="button" @onclick="Cancel" class="btn btn-info btn-sm">Cancel</button>
    </div>
}

@code{

    [CascadingParameter]
    private ModalParameters parameters { get; set; }

    public NoteHeader Note { get; set; }

    public UserData UserData { get; set; }

    private List<NoteFile> Files { get; set; }

    private bool WholeString { get; set; }

    //private EjsDropDownList<int, NoteFile> drp { get; set; }

    private int SelectedId { get; set; } = 4;

    protected async override Task OnInitializedAsync()
    {
        Note = parameters.Get<NoteHeader>("Note");
        UserData = parameters.Get<UserData>("UserData");
        Files = await Http.GetJsonAsync<List<NoteFile>>("api/NoteFileAdmin");
    }

    protected async Task OnSubmit()
    {
        CopyModel cm = new CopyModel();
        cm.FileId = SelectedId;
        cm.Note = Note;
        cm.WholeString = WholeString;
        cm.UserData = UserData;

        await Http.PostJsonAsync("api/CopyNote", cm);

        Modal.Close(ModalResult.Cancel());
    }

    private void Cancel()
    {
        Modal.Close(ModalResult.Cancel());
    }
}