@*--------------------------------------------------------------------------
    **
    **  Copyright (c) 2020, Dale Sinder
    **
    **  Name: NoteIndex.razor
    **
    **  Description: Displays the main file index grid
    **     Base notes and expands to show responses
    **
    **  This program is free software: you can redistribute it and/or modify
    **  it under the terms of the GNU General Public License version 3 as
    **  published by the Free Software Foundation.
    **
    **  This program is distributed in the hope that it will be useful,
    **  but WITHOUT ANY WARRANTY; without even the implied warranty of
    **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    **  GNU General Public License version 3 for more details.
    **
    **  You should have received a copy of the GNU General Public License
    **  version 3 along with this program in file "license-gpl-3.0.txt".
    **  If not, see <http: //www.gnu.org/licenses/gpl-3.0.txt>.
    **
    **--------------------------------------------------------------------------*@

@using Notes2021Blazor.Shared
@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.Navigations
@using Syncfusion.EJ2.Blazor.Buttons
@using System.Timers

@if (@Model.myAccess.ReadAccess)
{
    @Message
    <div class="col-lg-12 control-section dialoglist">
        <div class="content-wrapper">
            <div class="row">
                <div style="z-index:50; min-width:100%;">
                    <ListMenu Model="@Model" OnClick="ClickHandler" />
                </div>
                <EjsGrid @ref="MyGrid" DataSource="@Model.Notes" AllowPaging="true" AllowSelection="true" EnableHover="true" Toolbar="Toolbaritems" AllowExcelExport="true" AllowPdfExport="true" >
                    <GridPageSettings PageSize="Model.UserData.Ipref2" PageSizes="true"></GridPageSettings>
                    <GridEvents RowSelected="DisplayIt" OnToolbarClick="ToolbarClickHandler" TValue="NoteHeader"></GridEvents>
                    <GridTemplates>
                        <DetailTemplate>
                            @{
                                var current = (context as NoteHeader);
                                List<NoteHeader> Resp = Model.AllNotes.Where(p => p.NoteOrdinal == current.NoteOrdinal && p.ResponseOrdinal != 0).OrderBy(p => p.ResponseOrdinal).ToList();
                            }
                            @if (ShowContent)
                            {
                                <DisplayPanelMini currentHeader="current"></DisplayPanelMini>
                            }
                            <EjsGrid @ref="MyGrid2" DataSource="@Resp" AllowPaging="false" AllowSelection="true" EnableHover="true">
                                <GridEvents RowSelected="DisplayIt" TValue="NoteHeader"></GridEvents>
                                <GridTemplates>
                                    <DetailTemplate Context="extra">
                                        @if (ShowContent)
                                        {
                                            var current2 = (extra as NoteHeader);
                                            <DisplayPanelMini currentHeader="current2"></DisplayPanelMini>
                                        }
                                    </DetailTemplate>
                                </GridTemplates>
                                <GridColumns>
                                    <GridColumn Field=@nameof(NoteHeader.ResponseOrdinal) HeaderText="Resp. #" TextAlign="TextAlign.Left" Width="25" IsPrimaryKey="true"></GridColumn>
                                    <GridColumn Field=@nameof(NoteHeader.NoteSubject) HeaderText="Subject" TextAlign="TextAlign.Left" Width="150"></GridColumn>
                                    <GridColumn Field=@nameof(NoteHeader.AuthorName) HeaderText="Writer" TextAlign="TextAlign.Left" Width="80"></GridColumn>

                                    <GridColumn Field=@nameof(NoteHeader.CreateDateLocal) HeaderText="Date/Time" TextAlign="TextAlign.Left" Width="60">
                                        @*<Template Context="inner">
                                            @{
                                                var itemx = (inner as NoteHeader);
                                                <span>@Globals.LocalTimeBlazor(itemx.CreateDate)</span>
                                            }
                                        </Template>*@
                                    </GridColumn>
                                </GridColumns>
                            </EjsGrid>
                        </DetailTemplate>
                    </GridTemplates>
                    <GridColumns>
                        <GridColumn Field=@nameof(NoteHeader.NoteOrdinal) HeaderText="#" TextAlign="TextAlign.Left" Width="25" IsPrimaryKey="true"></GridColumn>
                        <GridColumn Field=@nameof(NoteHeader.NoteSubject) HeaderText="Subject" TextAlign="TextAlign.Left" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(NoteHeader.AuthorName) HeaderText="Writer" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                        <GridColumn Field=@nameof(NoteHeader.CreateDateLocal) HeaderText="Date/Time" Format="M/d/yyyy hh:mm tt" TextAlign="TextAlign.Left" Width="60">
                            @*<Template>
                                @{
                                    var item = (context as NoteHeader);
                                    <span>@Globals.LocalTimeBlazor(item.CreateDate).ToString()</span>
                                }
                            </Template>*@
                        </GridColumn>
                        <GridColumn Field=@nameof(NoteHeader.ResponseCount) HeaderText="Responses" TextAlign="TextAlign.Left" Width="40"></GridColumn>
                    </GridColumns>
                </EjsGrid>
                <EjsSwitch @bind-Checked="@ShowContent"></EjsSwitch> Show Content on Expand

            </div>
        </div>
    </div>
}
else if (@Model.myAccess.Write)
{
    <ListMenu Model="@Model" OnClick="ClickHandler" />
    <h3>You may not read this file, but you may write to it.</h3>
}
else
{
    <h3>You may not read this file.</h3>
}


@code{
    [Parameter] public NoteDisplayIndexModel Model { get; set; }
    [Parameter] public int FirstOrdinal { get; set; }
    [Parameter] public EventCallback<string> OnClick { get; set; }

    EjsGrid<NoteHeader> MyGrid;
    EjsGrid<NoteHeader> MyGrid2;

    private bool ShowContent { get; set; }

    private string Message { get; set; }

    private Timer timer { get; set; }

    private List<ItemModel> Toolbaritems = new List<ItemModel>();

    public List<LocalModel> MainModel { get; set; }

    protected override void OnInitialized()
    {
        ShowContent = Model.UserData.Pref7;

        Toolbaritems.Add(new ItemModel() { Text = "Print" });
        Toolbaritems.Add(new ItemModel() { Text = "PdfExport" });
        Toolbaritems.Add(new ItemModel() { Text = "ExcelExport" });
        //Toolbaritems.Add(new ItemModel() { Text = "Expand all" });
        //Toolbaritems.Add(new ItemModel() { Text = "Collapse all", Align = (Syncfusion.EJ2.Blazor.Navigations.ItemAlign.Right) });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        timer = new Timer(500);
        timer.Elapsed += TimerTick;
        timer.Enabled = true;
    }

    protected void TimerTick(Object source, ElapsedEventArgs e)
    {
        timer.Enabled = false;
        int pSize = MyGrid.PageSettings.PageSize;
        int page = (int)(((FirstOrdinal - 1) / pSize) + 1.98);
        if (page == MyGrid.PageSettings.CurrentPage)  // prevent infinite loop
            return;
        MyGrid.GoToPage(page);
    }

    protected void DisplayIt(RowSelectEventArgs<NoteHeader> args)
    {
        OnClick.InvokeAsync("Note:" + args.Data.Id);
    }

    protected void ClickHandler(string message)
    {
        OnClick.InvokeAsync(message);
    }

    public void ToolbarClickHandler(Syncfusion.EJ2.Blazor.Navigations.ClickEventArgs args)
    {
        //Message = args.Item.Id;
        if (args.Item.Text == "Expand all")
        {
            this.MyGrid.DetailExpandAll();
        }
        if (args.Item.Text == "Collapse all")
        {
            this.MyGrid.DetailCollapseAll();
        }
        if (args.Item.Id.EndsWith("_pdfexport"))
        {
            //Message = "PdfExport";
            MainModel = new List<LocalModel>();

            foreach (NoteHeader item in Model.Notes)
            {
                LocalModel it = new LocalModel();
                it.AuthorName = item.AuthorName;
                it.CreateDate = Globals.LocalTimeBlazor(item.CreateDate).ToShortDateString() + " " + Globals.LocalTimeBlazor(item.CreateDate).ToShortTimeString();
                it.NoteOrdinal = item.NoteOrdinal;
                it.NoteSubject = item.NoteSubject;
                it.ResponseCount = item.ResponseCount;
                it.ResponseOrdinal = item.ResponseOrdinal;

                MainModel.Add(it);
            }

            PdfExportProperties ExportProperties = new PdfExportProperties();
            ExportProperties.FileName = Model.noteFile.NoteFileName + ".pdf";
            ExportProperties.PageOrientation = PageOrientation.Landscape;
            ExportProperties.PageSize = PdfPageSize.Letter;
            ExportProperties.DataSource = MainModel;
            this.MyGrid.PdfExport(/*ExportProperties*/);
        }
        if (args.Item.Id.EndsWith("_excelexport"))
        {
            MainModel = new List<LocalModel>();

            foreach (NoteHeader item in Model.Notes)
            {
                LocalModel it = new LocalModel();
                it.AuthorName = item.AuthorName;
                it.CreateDate = Globals.LocalTimeBlazor(item.CreateDate).ToShortDateString() + " " + Globals.LocalTimeBlazor(item.CreateDate).ToShortTimeString();
                it.NoteOrdinal = item.NoteOrdinal;
                it.NoteSubject = item.NoteSubject;
                it.ResponseCount = item.ResponseCount;
                it.ResponseOrdinal = item.ResponseOrdinal;

                MainModel.Add(it);
            }

            ExcelExportProperties ExportProperties = new ExcelExportProperties();
            ExportProperties.FileName = Model.noteFile.NoteFileName + ".xlsx";
            ExportProperties.ExportType = ExportType.AllPages;
            //ExportProperties.DataSource = MainModel;
            this.MyGrid.ExcelExport(ExportProperties);
        }
        //Message = null;
    }

    public class LocalModel
    {
        public int NoteOrdinal {get; set;}
        public string NoteSubject { get; set; }
        public string AuthorName { get; set; }
        public string CreateDate { get; set; }
        public int ResponseCount { get; set; }
        public int ResponseOrdinal { get; set; }

    }

}
