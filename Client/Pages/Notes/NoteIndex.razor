@using Notes2021Blazor.Shared
@using Syncfusion.EJ2.Blazor.Grids
@using System.Timers

@if (@Model.myAccess.ReadAccess)
{
    <ListMenu Model="@Model" OnClick="ClickHandler" />
    <div class="col-lg-12 control-section dialoglist">
        <div class="content-wrapper">
            <div class="row">
                <EjsGrid @ref="MyGrid" DataSource="@Model.Notes" AllowPaging="true" AllowSelection="true" EnableHover="true" Toolbar="@(new List<string>() { "Print" })">
                    <GridPageSettings PageSize="Model.UserData.Ipref2" PageSizes="true"></GridPageSettings>
                    <GridEvents RowSelected="DisplayIt" TValue="NoteHeader"></GridEvents>
                    <GridTemplates>
                        <DetailTemplate>
                            @{
                                var current = (context as NoteHeader);
                                List<NoteHeader> Resp = Model.AllNotes.Where(p => p.NoteOrdinal == current.NoteOrdinal && p.ResponseOrdinal != 0).OrderBy(p => p.ResponseOrdinal).ToList();
                            }
                            <EjsGrid @ref="MyGrid2" DataSource="@Resp" AllowPaging="false" AllowSelection="true" EnableHover="true">
                                <GridEvents RowSelected="DisplayIt" TValue="NoteHeader"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field=@nameof(NoteHeader.ResponseOrdinal) HeaderText="Resp. #" TextAlign="TextAlign.Left" Width="25" IsPrimaryKey="true"></GridColumn>
                                    <GridColumn Field=@nameof(NoteHeader.NoteSubject) HeaderText="Subject" TextAlign="TextAlign.Left" Width="150"></GridColumn>
                                    <GridColumn Field=@nameof(NoteHeader.AuthorName) HeaderText="Writer" TextAlign="TextAlign.Left" Width="80"></GridColumn>

                                    <GridColumn Field=@nameof(NoteHeader.CreateDate) HeaderText="Date/Time" TextAlign="TextAlign.Left" Width="60">
                                        <Template Context="inner">
                                            @{
                                                var itemx = (inner as NoteHeader);
                                                DateTime curTimex = Model.tZone.Local(itemx.CreateDate);
                                                string tellx = curTimex.ToShortDateString() + " " + curTimex.ToShortTimeString() + " " + Model.tZone.Abbreviation;
                                                <span>@tellx</span>
                                            }
                                        </Template>
                                    </GridColumn>

                                </GridColumns>
                            </EjsGrid>
                        </DetailTemplate>
                    </GridTemplates>
                    <GridColumns>
                        <GridColumn Field=@nameof(NoteHeader.NoteOrdinal) HeaderText="#" TextAlign="TextAlign.Left" Width="15" IsPrimaryKey="true"></GridColumn>
                        <GridColumn Field=@nameof(NoteHeader.NoteSubject) HeaderText="Subject" TextAlign="TextAlign.Left" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(NoteHeader.AuthorName) HeaderText="Writer" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                        <GridColumn HeaderText="Date/Time" TextAlign="TextAlign.Left" Width="60">
                            <Template>
                                @{
                                    var item = (context as NoteHeader);
                                    DateTime curTime = Model.tZone.Local(item.CreateDate);
                                    string tell = curTime.ToShortDateString() + " " + curTime.ToShortTimeString() + " " + Model.tZone.Abbreviation;
                                    <span>@tell</span>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field=@nameof(NoteHeader.ResponseCount) HeaderText="Responses" TextAlign="TextAlign.Left" Width="40"></GridColumn>
                    </GridColumns>
                </EjsGrid>
            </div>
        </div>
    </div>
}
else if (@Model.myAccess.Write)
{
    <ListMenu Model="@Model" OnClick="ClickHandler" />
    <h3>You may not read this file, but you may write to it.</h3>
}
else
{
    <h3>You may not read this file.</h3>
}


@code{
    [Parameter] public NoteDisplayIndexModel Model { get; set; }
    [Parameter] public int FirstOrdinal { get; set; }
    [Parameter] public EventCallback<string> OnClick { get; set; }

    EjsGrid<NoteHeader> MyGrid;
    EjsGrid<NoteHeader> MyGrid2;

    private Timer timer { get; set; }

    protected override void OnParametersSet()
    {
        if (Model.UserData.Ipref2 == 0)
            Model.UserData.Ipref2 = 12;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        timer = new Timer(500);
        timer.Elapsed += TimerTick;
        timer.Enabled = true;
    }

    protected void TimerTick(Object source, ElapsedEventArgs e)
    {
        timer.Enabled = false;
        int pSize = MyGrid.PageSettings.PageSize;
        int page = (int)(((FirstOrdinal - 1) / pSize) + 1.98);
        if (page == MyGrid.PageSettings.CurrentPage)  // prevent infinite loop
            return;
        MyGrid.GoToPage(page);
    }

    protected void DisplayIt(RowSelectEventArgs<NoteHeader> args)
    {
        OnClick.InvokeAsync("Note:" + args.Data.Id);
    }

    protected void ClickHandler(string message)
    {
        OnClick.InvokeAsync(message);
    }

}