@*--------------------------------------------------------------------------
    **
    **  Copyright (c) 2020, Dale Sinder
    **
    **  Name: DisplayMenu.razor
    **
    **  Description:
    **      Menu bar for DisplayPanel
    **
    **  This program is free software: you can redistribute it and/or modify
    **  it under the terms of the GNU General Public License version 3 as
    **  published by the Free Software Foundation.
    **
    **  This program is distributed in the hope that it will be useful,
    **  but WITHOUT ANY WARRANTY; without even the implied warranty of
    **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    **  GNU General Public License version 3 for more details.
    **
    **  You should have received a copy of the GNU General Public License
    **  version 3 along with this program in file "license-gpl-3.0.txt".
    **  If not, see <http: //www.gnu.org/licenses/gpl-3.0.txt>.
    **
    **--------------------------------------------------------------------------*@
@using System.Timers
@using Notes2021Blazor.Shared
@using Syncfusion.EJ2.Blazor.Navigations

@inject IJSRuntime jsRuntime

<div class="menu-control">
    <div class="layout">
        <div id="container">
            <EjsMenu Items="@menuItems" HamburgerMode="@HamburgerMode" CssClass="menubar-specs">
                <MenuEvents ItemSelected="OnSelect"></MenuEvents>
            </EjsMenu>
        </div>
    </div>
</div>

<style>
    .menu-control {
        text-align: center;
        color: #FFF;
        background-color: #777;
    }

    .layout #container {
        color: #FFF;
        background-color: #777;
    }

    .menubar-specs ul.e-menu {
        color: #FFF;
        background-color: #777;
        font-weight:600;
    }

</style>

@*<p class="notesmenu">
        <button type="button" class="link" @onclick="Done">LIsting</button>
        <button type="button" class="link" @onclick="NextBaseNote">&nbsp;&nbsp;&nbsp;Next Base</button>
        <button type="button" class="link" @onclick="PreviousBaseNote">&nbsp;&nbsp;&nbsp;Previous Base</button>
        <button type="button" class="link" @onclick="NextNote">&nbsp;&nbsp;&nbsp;Next</button>
        <button type="button" class="link" @onclick="PreviousNote">&nbsp;&nbsp;&nbsp;Previous</button>

        <button type="button" class="link" @onclick="Forward">&nbsp;&nbsp;&nbsp;Forward</button>
        <button type="button" class="link" @onclick="Copy">&nbsp;&nbsp;&nbsp;Copy</button>
        <button type="button" class="link" @onclick="mail">&nbsp;&nbsp;&nbsp;mail</button>
        <button type="button" class="link" @onclick="Mark">&nbsp;&nbsp;&nbsp;Mark</button>
        <button type="button" class="link" @onclick="Html">&nbsp;&nbsp;&nbsp;Html</button>
        <button type="button" class="link" @onclick="html">&nbsp;&nbsp;&nbsp;html</button>
        @if (@Model.myAccess.Write)
        {
            <button type="button" class="link" @onclick="NewResponse">&nbsp;&nbsp;&nbsp;New Response</button>
        }
        @if (@Model.myAccess.DeleteEdit || Model.myHeader.AuthorID == Model.myAccess.UserID)
        {
            <button type="button" class="link" @onclick="Edit">&nbsp;&nbsp;&nbsp;Edit</button>
            <button type="button" class="link" @onclick="Delete">&nbsp;&nbsp;&nbsp;Delete</button>
        }
        <button type="button" class="link" @onclick="Search">&nbsp;&nbsp;&nbsp;Search</button>
        <span>&nbsp;&nbsp;&nbsp;<button type="button" class="link" @onclick="ShowHelp">Z for HELP</button></span>
    </p>*@

@code {
    [Parameter] public NoteDisplayIndexModel Model { get; set; }
    [Parameter] public EventCallback<string> OnClick { get; set; }

    private bool HamburgerMode { get; set; } = false;

    private List<object> menuItems { get; set; }

    public int Width { get; set; }

    protected async override Task OnParametersSetAsync()
    {

        menuItems = new List<object>();

        object item = new { id = "Done", text = "LIsting" };
        menuItems.Add(item);
        item = new { id = "NextBaseNote", text = "Next Base" };
        menuItems.Add(item);
        item = new { id = "PreviousBaseNote", text = "Previous Base" };
        menuItems.Add(item);
        item = new { id = "NextNote", text = "Next" };
        menuItems.Add(item);
        item = new { id = "PreviousNote", text = "Previous" };
        menuItems.Add(item);
        item = new { id = "OutPutMenu", text = "Output" };
        menuItems.Add(item);
        item = new { id = "Forward", text = "Forward", parentId = "OutPutMenu" };
        menuItems.Add(item);
        item = new { id = "Copy", text = "Copy", parentId = "OutPutMenu" };
        menuItems.Add(item);
        item = new { id = "mail", text = "mail", parentId = "OutPutMenu" };
        menuItems.Add(item);
        item = new { id = "Mark", text = "Mark", parentId = "OutPutMenu" };
        menuItems.Add(item);
        item = new { id = "Html", text = "Html (expandable)", parentId = "OutPutMenu" };
        menuItems.Add(item);
        item = new { id = "html", text = "html (flat)", parentId = "OutPutMenu" };
        menuItems.Add(item);

        if (Model.myAccess.Write)
        {
            item = new { id = "NewResponse", text = "New Response" };
            menuItems.Add(item);
        }
        if (Model.myAccess.DeleteEdit || Model.myHeader.AuthorID == Model.myAccess.UserID)
        {
            item = new { id = "Edit", text = "Edit" };
            menuItems.Add(item);
            item = new { id = "Delete", text = "Delete" };
            menuItems.Add(item);
        }
        item = new { id = "Search", text = "Search" };
        menuItems.Add(item);
        item = new { id = "ShowHelp", text = "Z for HELP" };
        menuItems.Add(item);

        Width = await jsRuntime.InvokeAsync<int>("getWidth", "x");

    }

    protected Timer timer { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer(100);
            timer.Elapsed += TimerTick;
            timer.Enabled = true;
        }
    }

    protected void TimerTick(Object source, ElapsedEventArgs e)
    {
        timer.Enabled = false;
        if (Width < 1150)
        {
            HamburgerMode = true;
            StateHasChanged();
        }
    }

    public async Task OnSelect(MenuEventArgs e)
    {
        if (e.Item.Id == "OutPutMenu")
            return;

        await OnClick.InvokeAsync(e.Item.Id);

        //OnParametersSet();
        //StateHasChanged();
    }


    //protected void ShowHelp()
    //{
    //    OnClick.InvokeAsync("ShowHelp");
    //}

    //protected void Done()
    //{
    //    OnClick.InvokeAsync("Done");
    //}

    //protected void NextBaseNote()
    //{
    //    OnClick.InvokeAsync("NextBaseNote");
    //}

    //protected void PreviousBaseNote()
    //{
    //    OnClick.InvokeAsync("PreviousBaseNote");
    //}

    //protected void NextNote()
    //{
    //    OnClick.InvokeAsync("NextNote");
    //}

    //protected void PreviousNote()
    //{
    //    OnClick.InvokeAsync("PreviousNote");
    //}

    //protected void Forward()
    //{
    //    OnClick.InvokeAsync("Forward");
    //}

    //protected void Copy()
    //{
    //    OnClick.InvokeAsync("Copy");
    //}

    //protected void mail()
    //{
    //    OnClick.InvokeAsync("mail");
    //}

    //protected void Mark()
    //{
    //    OnClick.InvokeAsync("Mark");
    //}

    //protected void Html()
    //{
    //    OnClick.InvokeAsync("Html");
    //}

    //protected void html()
    //{
    //    OnClick.InvokeAsync("html");
    //}

    //protected void NewResponse()
    //{
    //    OnClick.InvokeAsync("NewResponse");
    //}

    //protected void Edit()
    //{
    //    OnClick.InvokeAsync("Edit");
    //}

    //protected void Delete()
    //{
    //    OnClick.InvokeAsync("Delete");
    //}

    //protected void Search()
    //{
    //    OnClick.InvokeAsync("Search");
    //}
}


