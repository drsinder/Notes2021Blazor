@page "/options/preferences"

@using Notes2021Blazor.Shared
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Timers
@using System.Text
@using Newtonsoft.Json
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


@if (string.IsNullOrEmpty(currentText))
{
    <p class="center"><em>Loading...</em></p>
}
else
{
    <AuthorizeView Roles="User">
        <Authorized>
            <div>
                <h2>Set Time Zone</h2>
                <h5>
                    @currentText
                </h5>
                <p>Select your Time Zone:</p>
                <select class="form-control medium-input" @bind="@myZid">
                    <option value=""></option>
                    @foreach (LocalModel item in MyList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
                <br />
                <p>Starting Page Size for Pagable Lists:</p>
                <select class="form-control short-input" @bind="@pageSize">
                    @*<option value="12"></option>*@
                    @foreach (LocalModel2 item in MySizes)
                    {
                        <option value="@item.Psize">@item.Name</option>
                    }
                </select>
                <br />
                <div>Use scrolling index rather than paged: <input type="checkbox" @bind="@UserData.Pref1" /> </div>
                <br />
                @*<div>Use alternate text editor: <input type="checkbox" @bind="@UserData.Pref2" /> </div>*@

                <br />
                <button type="button" @onclick="OnSubmit" class="btn btn-info btn-sm">Submit</button>
            </div>
        </Authorized>
        <NotAuthorized>
            Access Denied!
        </NotAuthorized>
    </AuthorizeView>
}

@code{

    private UserData UserData { get; set; }
    private List<TZone> TZones { get; set; }
    private TZone MyZone { get; set; }
    private string currentText { get; set; }
    private int myZid { get; set; }
    private LocalModel stuff { get; set; }
    private List<LocalModel> MyList { get; set; }
    private List<LocalModel2> MySizes { get; set; }
    private string pageSize { get; set; }


    protected override async Task OnInitializedAsync()
    {
        TZones = await Http.GetJsonAsync<List<TZone>>("api/TimeZones/");

        TZones = TZones.OrderBy(p => p.OffsetHours).ThenBy(p => p.OffsetMinutes).ToList();

        UserData = await Http.GetJsonAsync<UserData>("api/User/");

        MyZone = TZones.SingleOrDefault(p => p.Id == UserData.TimeZoneID);

        myZid = UserData.TimeZoneID;

        pageSize = UserData.Ipref2.ToString();

        MySizes = new List<LocalModel2> { new LocalModel2("0", "All"), new LocalModel2("5"), new LocalModel2("10"), new LocalModel2("12"), new LocalModel2("20") };

        MyList = new List<LocalModel>();
        foreach(TZone item in TZones)
        {
            LocalModel x = new LocalModel(item.Id.ToString(), item.Name + " - " + item.Abbreviation + " - " + item.Offset);
            MyList.Add(x);
        }

        currentText = "Current Time Zone: " + MyZone.Name + " - " + MyZone.Abbreviation + " - " + MyZone.Offset;
    }


    private async Task OnSubmit()
    {
        UserData.TimeZoneID = myZid;
        UserData.Ipref2 = int.Parse(pageSize);
        MyZone = TZones.SingleOrDefault(p => p.Id == UserData.TimeZoneID);
        currentText = "Current Time Zone: " + MyZone.Name + " - " + MyZone.Abbreviation + " - " + MyZone.Offset;

        var stringContent = new StringContent(JsonConvert.SerializeObject(UserData), Encoding.UTF8, "application/json");
        HttpResponseMessage result = await Http.PutAsync("api/User/", stringContent);

        StateHasChanged();

        NavigationManager.NavigateTo(Globals.RootUri, true);
    }


    public class LocalModel
    {
        public LocalModel (string id, string name)
        {
            Id = id;
            Name = name;
        }
        public string Id { get; set; }
        public string Name { get; set; }
    }

    public class LocalModel2
    {
        public LocalModel2(string psize)
        {
            Psize = psize;
            Name = psize;
        }

        public LocalModel2(string psize, string name)
        {
            Psize = psize;
            Name = name;
        }
        public string Psize { get; set; }
        public string Name { get; set; }
    }
}
