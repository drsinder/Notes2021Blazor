@*--------------------------------------------------------------------------
    **
    **  Copyright (c) 2020, Dale Sinder
    **
    **  Name: MainLayout.razor
    **
    **  Description:
    **      Layout for all but main index
    **
    **  This program is free software: you can redistribute it and/or modify
    **  it under the terms of the GNU General Public License version 3 as
    **  published by the Free Software Foundation.
    **
    **  This program is distributed in the hope that it will be useful,
    **  but WITHOUT ANY WARRANTY; without even the implied warranty of
    **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    **  GNU General Public License version 3 for more details.
    **
    **  You should have received a copy of the GNU General Public License
    **  version 3 along with this program in file "license-gpl-3.0.txt".
    **  If not, see <http: //www.gnu.org/licenses/gpl-3.0.txt>.
    **
    **--------------------------------------------------------------------------*@

@inherits LayoutComponentBase
@*@using Microsoft.AspNetCore.SignalR.Client*@
@inject NavigationManager NavigationManager
@inject IModalService Modal
<BlazoredModal Style="blazored-custom-modal" DisableBackgroundCancel="true" HideCloseButton="true" HideHeader="true" />
<div class="sidebar">
    <NavMenu />
</div>

<div class="main">
    @*<div class="top-row px-4">
            <LoginDisplay />
            <a href="about" class="ml-md-auto">About</a>
        </div>*@

    <div class="content px-4">
        @Body
    </div>
</div>

@*@functions{

        HubConnection hubConnection;
        string userInput;
        string messageInput;

        protected override async Task OnInitializedAsync()
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/SysMessageHub"))
                .Build();

            hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {

            // popup message

            var parameters = new ModalParameters();
                parameters.Add("Message", message);
                Modal.OnClose += HidePopUp;
                Modal.Show<SysMessageBox>("", parameters);
            });

            await hubConnection.StartAsync();
        }

        public void HidePopUp(ModalResult x)
        {
            Modal.OnClose -= HidePopUp;
        }

        Task Send() => hubConnection.SendAsync("SendMessage", userInput, messageInput);

        public bool IsConnected => hubConnection.State == HubConnectionState.Connected;


    }*@


